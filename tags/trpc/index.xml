<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TRPC on firebirdテクテクテクブログ</title><link>https://firebird-techtalktech.com/tags/trpc/</link><description>Recent content in TRPC on firebirdテクテクテクブログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>トミー</copyright><lastBuildDate>Sun, 14 Sep 2025 21:30:00 +0900</lastBuildDate><atom:link href="https://firebird-techtalktech.com/tags/trpc/index.xml" rel="self" type="application/rss+xml"/><item><title>Protocol Bufferの真実：バイナリエンコーディングとRPC技術の全貌</title><link>https://firebird-techtalktech.com/post/protocol-buffer-comprehensive-guide/</link><pubDate>Sun, 14 Sep 2025 21:30:00 +0900</pubDate><guid>https://firebird-techtalktech.com/post/protocol-buffer-comprehensive-guide/</guid><description>&lt;h2 id="はじめに">はじめに
&lt;/h2>&lt;p>「Protocol Bufferって何？暗号化？」「gRPCとtRPCって何が違うの？」&lt;/p>
&lt;p>そんな疑問を持ったことはありませんか？この記事では、Protocol Bufferのバイナリエンコーディング原理から、現代のRPC技術比較まで、実例を交えて詳しく解説します。&lt;/p>
&lt;h2 id="-protocol-buffer詳細技術分析">🔧 Protocol Buffer詳細技術分析
&lt;/h2>&lt;h3 id="protocol-bufferとは何か">Protocol Bufferとは何か
&lt;/h3>&lt;p>Protocol Bufferは、Googleが開発した&lt;strong>構造化データの効率的バイナリシリアライゼーション&lt;/strong>技術です。重要なのは「暗号化ではない」ということ。あくまで&lt;strong>効率化・圧縮が目的&lt;/strong>のエンコーディング技術です。&lt;/p>
&lt;h3 id="バイナリエンコーディング原理の核心">バイナリエンコーディング原理の核心
&lt;/h3>&lt;p>Protocol Bufferの最大の特徴は&lt;strong>フィールド番号システム&lt;/strong>です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>この構文の意味は：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>データ型&lt;/strong>: &lt;code>string&lt;/code>&lt;/li>
&lt;li>&lt;strong>フィールド名&lt;/strong>: &lt;code>name&lt;/code>（実際には送信されない！）&lt;/li>
&lt;li>&lt;strong>フィールド番号&lt;/strong>: &lt;code>2&lt;/code>（これが実際に送信される）&lt;/li>
&lt;/ul>
&lt;h3 id="具体的バイナリ解析例">具体的バイナリ解析例
&lt;/h3>&lt;p>実際にどのようにエンコードされるかを見てみましょう。&lt;/p>
&lt;p>&lt;strong>元データ&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Protocol Bufferバイナリ&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0A 05 41 6C 69 63 65 10 1A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>詳細解析&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>0A 05&lt;/code>: フィールド2（name）開始、長さ5バイト&lt;/li>
&lt;li>&lt;code>41 6C 69 63 65&lt;/code>: &amp;ldquo;Alice&amp;quot;の文字列
&lt;ul>
&lt;li>&lt;code>41&lt;/code> = ASCII 65 = &amp;lsquo;A&amp;rsquo;&lt;/li>
&lt;li>&lt;code>6C&lt;/code> = ASCII 108 = &amp;rsquo;l'&lt;/li>
&lt;li>&lt;code>69&lt;/code> = ASCII 105 = &amp;lsquo;i&amp;rsquo;&lt;/li>
&lt;li>&lt;code>63&lt;/code> = ASCII 99 = &amp;lsquo;c&amp;rsquo;&lt;/li>
&lt;li>&lt;code>65&lt;/code> = ASCII 101 = &amp;rsquo;e'&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>10 1A&lt;/code>: フィールド3（age）= 26&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>効率性の証明&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>JSON: &lt;code>{&amp;quot;name&amp;quot;:&amp;quot;Alice&amp;quot;,&amp;quot;age&amp;quot;:26}&lt;/code> = 26バイト&lt;/li>
&lt;li>Protocol Buffer: &lt;code>0A 05 41 6C 69 63 65 10 1A&lt;/code> = 9バイト&lt;/li>
&lt;li>&lt;strong>約3倍の効率化！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="暗号化との明確な区別">暗号化との明確な区別
&lt;/h3>&lt;p>多くの人が誤解しがちなポイントです：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>比較項目&lt;/th>
&lt;th>Protocol Buffer&lt;/th>
&lt;th>暗号化&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>目的&lt;/strong>&lt;/td>
&lt;td>効率化・圧縮&lt;/td>
&lt;td>セキュリティ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>復元&lt;/strong>&lt;/td>
&lt;td>簡単（protoc &amp;ndash;decode）&lt;/td>
&lt;td>秘密鍵必須&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>可読性&lt;/strong>&lt;/td>
&lt;td>バイナリだが構造は明確&lt;/td>
&lt;td>完全に不明&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>用途&lt;/strong>&lt;/td>
&lt;td>通信効率化&lt;/td>
&lt;td>データ保護&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="deprecatedreserved標準フロー">deprecated/reserved標準フロー
&lt;/h3>&lt;p>Protocol Bufferの真価は、段階的な&lt;strong>スキーマ進化&lt;/strong>にあります。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// 段階1: 廃止警告
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">deprecated&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// 段階2: 完全削除・永久欠番
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reserved&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号永久欠番
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reserved&lt;/span> &lt;span class="s">&amp;#34;phone&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド名永久欠番
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>この仕組みにより：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>後方互換性&lt;/strong>: 古いクライアントでも動作&lt;/li>
&lt;li>&lt;strong>前方互換性&lt;/strong>: 新しいフィールドを安全に追加&lt;/li>
&lt;li>&lt;strong>再利用防止&lt;/strong>: reserved設定で同名・同番号の誤用防止&lt;/li>
&lt;/ul>
&lt;h2 id="-rpc技術アーキテクチャ比較分析">🌐 RPC技術アーキテクチャ比較分析
&lt;/h2>&lt;h3 id="rpcの広義定義">RPCの広義定義
&lt;/h3>&lt;p>RPC（Remote Procedure Call）とは「&lt;strong>ネットワーク越しの関数呼び出し全般&lt;/strong>」を指します。&lt;/p>
&lt;p>普段使っているこれらも、実はすべてRPCです：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// これもRPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/users/123&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// これもRPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">trpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// これもRPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GetUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="実装手段別比較">実装手段別比較
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>RPC実装&lt;/th>
&lt;th>データ形式&lt;/th>
&lt;th>プロトコル&lt;/th>
&lt;th>対象言語&lt;/th>
&lt;th>送信量&lt;/th>
&lt;th>典型的用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>gRPC&lt;/strong>&lt;/td>
&lt;td>Protocol Buffer&lt;/td>
&lt;td>HTTP/2&lt;/td>
&lt;td>多言語&lt;/td>
&lt;td>✅最小&lt;/td>
&lt;td>マイクロサービス間&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>tRPC&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>TypeScript専用&lt;/td>
&lt;td>❌大&lt;/td>
&lt;td>フロント↔バック（TS統一）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>REST&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>汎用&lt;/td>
&lt;td>❌大&lt;/td>
&lt;td>一般的なWeb API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GraphQL&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>汎用&lt;/td>
&lt;td>⚠️中&lt;/td>
&lt;td>柔軟なクエリAPI&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="技術選択の4軸判断フレームワーク">技術選択の4軸判断フレームワーク
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>言語環境&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>単一言語 → tRPC&lt;/li>
&lt;li>多言語混在 → gRPC、REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通信頻度&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>高頻度・大量 → gRPC&lt;/li>
&lt;li>低頻度・小量 → REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>データ量&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>大容量 → Protocol Buffer&lt;/li>
&lt;li>小容量 → JSON&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>開発効率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>型安全性重視 → tRPC、gRPC&lt;/li>
&lt;li>汎用性重視 → REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="実際の使い分け戦略">実際の使い分け戦略
&lt;/h3>&lt;p>実際のプロダクト開発では、以下のような使い分けが効果的です：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">🏢 マイクロサービス間通信
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ gRPC（Go, Java, Python等の多言語環境）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">🖥️ フロントエンド通信
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ tRPC検討（TypeScript統一環境）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ REST（既存システム・汎用性重視）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">🔌 外部API提供
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ REST（互換性・理解しやすさ）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">⚙️ 管理画面・内部ツール
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ 通常のHTTP API（シンプルさ重視）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="通信効率の実測比較">通信効率の実測比較
&lt;/h3>&lt;p>同じデータを異なる方式で送信した場合：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>データ形式&lt;/th>
&lt;th>送信量&lt;/th>
&lt;th>パース速度&lt;/th>
&lt;th>型安全性&lt;/th>
&lt;th>人間可読性&lt;/th>
&lt;th>学習コスト&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>JSON&lt;/strong>&lt;/td>
&lt;td>❌大（100%）&lt;/td>
&lt;td>❌遅&lt;/td>
&lt;td>❌弱&lt;/td>
&lt;td>✅高&lt;/td>
&lt;td>✅低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MessagePack&lt;/strong>&lt;/td>
&lt;td>⚠️中（60%）&lt;/td>
&lt;td>⚠️中&lt;/td>
&lt;td>❌弱&lt;/td>
&lt;td>❌低&lt;/td>
&lt;td>⚠️中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Protocol Buffer&lt;/strong>&lt;/td>
&lt;td>✅小（30%）&lt;/td>
&lt;td>✅高速&lt;/td>
&lt;td>✅強&lt;/td>
&lt;td>❌低&lt;/td>
&lt;td>❌高&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="実践的な選択指針">実践的な選択指針
&lt;/h2>&lt;h3 id="grpcを選ぶべき場面">gRPCを選ぶべき場面
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ マイクロサービス間の高頻度通信
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 多言語環境（Go、Java、Python、C++等）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ パフォーマンス最優先
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 厳密な型安全性が必要
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="trpcを選ぶべき場面">tRPCを選ぶべき場面
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ フロントエンド・バックエンドともTypeScript
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 開発効率・開発体験重視
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ チーム全員のTypeScript習熟度が高い
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 通信量がそれほど多くない
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="restを選ぶべき場面">RESTを選ぶべき場面
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ 外部向けAPI提供
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ チームの学習コスト最小化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 既存システムとの互換性重視
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ デバッグ・トラブルシューティング重視
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ
&lt;/h2>&lt;h3 id="protocol-bufferの核心">Protocol Bufferの核心
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>バイナリエンコーディング&lt;/strong>：暗号化ではなく効率化技術&lt;/li>
&lt;li>&lt;strong>フィールド番号システム&lt;/strong>：名前ではなく番号で識別&lt;/li>
&lt;li>&lt;strong>段階的スキーマ進化&lt;/strong>：deprecated→reserved フロー&lt;/li>
&lt;li>&lt;strong>圧倒的な通信効率&lt;/strong>：JSONの約1/3のサイズ&lt;/li>
&lt;/ul>
&lt;h3 id="rpc技術選択の要点">RPC技術選択の要点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>RPC = 広義概念&lt;/strong>：REST APIもgRPCもすべてRPC&lt;/li>
&lt;li>&lt;strong>実装は多様&lt;/strong>：プロトコル・データ形式・対象言語で差別化&lt;/li>
&lt;li>&lt;strong>選択は4軸判断&lt;/strong>：言語環境・通信頻度・データ量・開発効率&lt;/li>
&lt;li>&lt;strong>適材適所の活用&lt;/strong>：単一技術ではなく使い分けが重要&lt;/li>
&lt;/ul>
&lt;h3 id="技術選択の本質">技術選択の本質
&lt;/h3>&lt;p>重要なのは「&lt;strong>目的に応じた適切な技術選択&lt;/strong>」です。Protocol BufferもgRPCも、決して万能ではありません。プロジェクトの要件・チームの状況・運用の制約を総合的に判断し、最適な組み合わせを選ぶことが成功への鍵です。&lt;/p>
&lt;p>次回は、実際のProtocol Bufferスキーマ設計や、gRPCサービスの実装例について詳しく解説予定です。お楽しみに！&lt;/p>
&lt;hr>
&lt;p>&lt;strong>関連記事&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >Protocol Bufferスキーマ設計のベストプラクティス&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >gRPCサービス実装の実践的パターン&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >マイクロサービス間通信の技術選択フレームワーク&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>執筆日&lt;/strong>: 2025-09-14
&lt;strong>分類&lt;/strong>: 技術記事・アーキテクチャ・Protocol Buffer・RPC・gRPC・tRPC
&lt;strong>対象読者&lt;/strong>: ソフトウェアエンジニア・システムアーキテクト・マイクロサービス開発者&lt;/p></description></item><item><title>Protocol Bufferの真実：バイナリエンコーディングとRPC技術の全貌</title><link>https://firebird-techtalktech.com/post/protocol-buffer%E3%81%AE%E7%9C%9F%E5%AE%9F%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8rpc%E6%8A%80%E8%A1%93%E3%81%AE%E5%85%A8%E8%B2%8C/</link><pubDate>Sun, 14 Sep 2025 13:20:00 +0900</pubDate><guid>https://firebird-techtalktech.com/post/protocol-buffer%E3%81%AE%E7%9C%9F%E5%AE%9F%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8rpc%E6%8A%80%E8%A1%93%E3%81%AE%E5%85%A8%E8%B2%8C/</guid><description>&lt;h1 id="protocol-bufferの真実バイナリエンコーディングとrpc技術の全貌">Protocol Bufferの真実：バイナリエンコーディングとRPC技術の全貌
&lt;/h1>&lt;h2 id="はじめに">はじめに
&lt;/h2>&lt;p>「Protocol Bufferって何？暗号化？」「gRPCとtRPCって何が違うの？」&lt;/p>
&lt;p>そんな疑問を持ったことはありませんか？この記事では、Protocol Bufferのバイナリエンコーディング原理から、現代のRPC技術比較まで、実例を交えて詳しく解説します。&lt;/p>
&lt;h2 id="-protocol-buffer詳細技術分析">🔧 Protocol Buffer詳細技術分析
&lt;/h2>&lt;h3 id="protocol-bufferとは何か">Protocol Bufferとは何か
&lt;/h3>&lt;p>Protocol Bufferは、Googleが開発した&lt;strong>構造化データの効率的バイナリシリアライゼーション&lt;/strong>技術です。重要なのは「暗号化ではない」ということ。あくまで&lt;strong>効率化・圧縮が目的&lt;/strong>のエンコーディング技術です。&lt;/p>
&lt;h3 id="バイナリエンコーディング原理の核心">バイナリエンコーディング原理の核心
&lt;/h3>&lt;p>Protocol Bufferの最大の特徴は&lt;strong>フィールド番号システム&lt;/strong>です。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>この構文の意味は：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>データ型&lt;/strong>: &lt;code>string&lt;/code>&lt;/li>
&lt;li>&lt;strong>フィールド名&lt;/strong>: &lt;code>name&lt;/code>（実際には送信されない！）&lt;/li>
&lt;li>&lt;strong>フィールド番号&lt;/strong>: &lt;code>2&lt;/code>（これが実際に送信される）&lt;/li>
&lt;/ul>
&lt;h3 id="具体的バイナリ解析例">具体的バイナリ解析例
&lt;/h3>&lt;p>実際にどのようにエンコードされるかを見てみましょう。&lt;/p>
&lt;p>&lt;strong>元データ&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Protocol Bufferバイナリ&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0A 05 41 6C 69 63 65 10 1A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>詳細解析&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>0A 05&lt;/code>: フィールド2（name）開始、長さ5バイト&lt;/li>
&lt;li>&lt;code>41 6C 69 63 65&lt;/code>: &amp;ldquo;Alice&amp;quot;の文字列
&lt;ul>
&lt;li>&lt;code>41&lt;/code> = ASCII 65 = &amp;lsquo;A&amp;rsquo;&lt;/li>
&lt;li>&lt;code>6C&lt;/code> = ASCII 108 = &amp;rsquo;l'&lt;/li>
&lt;li>&lt;code>69&lt;/code> = ASCII 105 = &amp;lsquo;i&amp;rsquo;&lt;/li>
&lt;li>&lt;code>63&lt;/code> = ASCII 99 = &amp;lsquo;c&amp;rsquo;&lt;/li>
&lt;li>&lt;code>65&lt;/code> = ASCII 101 = &amp;rsquo;e'&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>10 1A&lt;/code>: フィールド3（age）= 26&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>効率性の証明&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>JSON: &lt;code>{&amp;quot;name&amp;quot;:&amp;quot;Alice&amp;quot;,&amp;quot;age&amp;quot;:26}&lt;/code> = 26バイト&lt;/li>
&lt;li>Protocol Buffer: &lt;code>0A 05 41 6C 69 63 65 10 1A&lt;/code> = 9バイト&lt;/li>
&lt;li>&lt;strong>約3倍の効率化！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="暗号化との明確な区別">暗号化との明確な区別
&lt;/h3>&lt;p>多くの人が誤解しがちなポイントです：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>比較項目&lt;/th>
&lt;th>Protocol Buffer&lt;/th>
&lt;th>暗号化&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>目的&lt;/strong>&lt;/td>
&lt;td>効率化・圧縮&lt;/td>
&lt;td>セキュリティ&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>復元&lt;/strong>&lt;/td>
&lt;td>簡単（protoc &amp;ndash;decode）&lt;/td>
&lt;td>秘密鍵必須&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>可読性&lt;/strong>&lt;/td>
&lt;td>バイナリだが構造は明確&lt;/td>
&lt;td>完全に不明&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>用途&lt;/strong>&lt;/td>
&lt;td>通信効率化&lt;/td>
&lt;td>データ保護&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="deprecatedreserved標準フロー">deprecated/reserved標準フロー
&lt;/h3>&lt;p>Protocol Bufferの真価は、段階的な&lt;strong>スキーマ進化&lt;/strong>にあります。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// 段階1: 廃止警告
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">deprecated&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// 段階2: 完全削除・永久欠番
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reserved&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド番号永久欠番
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reserved&lt;/span> &lt;span class="s">&amp;#34;phone&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// フィールド名永久欠番
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>この仕組みにより：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>後方互換性&lt;/strong>: 古いクライアントでも動作&lt;/li>
&lt;li>&lt;strong>前方互換性&lt;/strong>: 新しいフィールドを安全に追加&lt;/li>
&lt;li>&lt;strong>再利用防止&lt;/strong>: reserved設定で同名・同番号の誤用防止&lt;/li>
&lt;/ul>
&lt;h2 id="-rpc技術アーキテクチャ比較分析">🌐 RPC技術アーキテクチャ比較分析
&lt;/h2>&lt;h3 id="rpcの広義定義">RPCの広義定義
&lt;/h3>&lt;p>RPC（Remote Procedure Call）とは「&lt;strong>ネットワーク越しの関数呼び出し全般&lt;/strong>」を指します。&lt;/p>
&lt;p>普段使っているこれらも、実はすべてRPCです：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// これもRPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/users/123&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// これもRPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">trpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// これもRPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GetUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="実装手段別比較">実装手段別比較
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>RPC実装&lt;/th>
&lt;th>データ形式&lt;/th>
&lt;th>プロトコル&lt;/th>
&lt;th>対象言語&lt;/th>
&lt;th>送信量&lt;/th>
&lt;th>典型的用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>gRPC&lt;/strong>&lt;/td>
&lt;td>Protocol Buffer&lt;/td>
&lt;td>HTTP/2&lt;/td>
&lt;td>多言語&lt;/td>
&lt;td>✅最小&lt;/td>
&lt;td>マイクロサービス間&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>tRPC&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>TypeScript専用&lt;/td>
&lt;td>❌大&lt;/td>
&lt;td>フロント↔バック（TS統一）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>REST&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>汎用&lt;/td>
&lt;td>❌大&lt;/td>
&lt;td>一般的なWeb API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GraphQL&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>汎用&lt;/td>
&lt;td>⚠️中&lt;/td>
&lt;td>柔軟なクエリAPI&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="技術選択の4軸判断フレームワーク">技術選択の4軸判断フレームワーク
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>言語環境&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>単一言語 → tRPC&lt;/li>
&lt;li>多言語混在 → gRPC、REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>通信頻度&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>高頻度・大量 → gRPC&lt;/li>
&lt;li>低頻度・小量 → REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>データ量&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>大容量 → Protocol Buffer&lt;/li>
&lt;li>小容量 → JSON&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>開発効率&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>型安全性重視 → tRPC、gRPC&lt;/li>
&lt;li>汎用性重視 → REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="実際の使い分け戦略">実際の使い分け戦略
&lt;/h3>&lt;p>実際のプロダクト開発では、以下のような使い分けが効果的です：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">🏢 マイクロサービス間通信
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ gRPC（Go, Java, Python等の多言語環境）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">🖥️ フロントエンド通信
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ tRPC検討（TypeScript統一環境）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ REST（既存システム・汎用性重視）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">🔌 外部API提供
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ REST（互換性・理解しやすさ）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">⚙️ 管理画面・内部ツール
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">→ 通常のHTTP API（シンプルさ重視）
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="通信効率の実測比較">通信効率の実測比較
&lt;/h3>&lt;p>同じデータを異なる方式で送信した場合：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>データ形式&lt;/th>
&lt;th>送信量&lt;/th>
&lt;th>パース速度&lt;/th>
&lt;th>型安全性&lt;/th>
&lt;th>人間可読性&lt;/th>
&lt;th>学習コスト&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>JSON&lt;/strong>&lt;/td>
&lt;td>❌大（100%）&lt;/td>
&lt;td>❌遅&lt;/td>
&lt;td>❌弱&lt;/td>
&lt;td>✅高&lt;/td>
&lt;td>✅低&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MessagePack&lt;/strong>&lt;/td>
&lt;td>⚠️中（60%）&lt;/td>
&lt;td>⚠️中&lt;/td>
&lt;td>❌弱&lt;/td>
&lt;td>❌低&lt;/td>
&lt;td>⚠️中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Protocol Buffer&lt;/strong>&lt;/td>
&lt;td>✅小（30%）&lt;/td>
&lt;td>✅高速&lt;/td>
&lt;td>✅強&lt;/td>
&lt;td>❌低&lt;/td>
&lt;td>❌高&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="実践的な選択指針">実践的な選択指針
&lt;/h2>&lt;h3 id="grpcを選ぶべき場面">gRPCを選ぶべき場面
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ マイクロサービス間の高頻度通信
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 多言語環境（Go、Java、Python、C++等）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ パフォーマンス最優先
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 厳密な型安全性が必要
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="trpcを選ぶべき場面">tRPCを選ぶべき場面
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ フロントエンド・バックエンドともTypeScript
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 開発効率・開発体験重視
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ チーム全員のTypeScript習熟度が高い
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 通信量がそれほど多くない
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="restを選ぶべき場面">RESTを選ぶべき場面
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ 外部向けAPI提供
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ チームの学習コスト最小化
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ 既存システムとの互換性重視
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ デバッグ・トラブルシューティング重視
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="まとめ">まとめ
&lt;/h2>&lt;h3 id="protocol-bufferの核心">Protocol Bufferの核心
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>バイナリエンコーディング&lt;/strong>：暗号化ではなく効率化技術&lt;/li>
&lt;li>&lt;strong>フィールド番号システム&lt;/strong>：名前ではなく番号で識別&lt;/li>
&lt;li>&lt;strong>段階的スキーマ進化&lt;/strong>：deprecated→reserved フロー&lt;/li>
&lt;li>&lt;strong>圧倒的な通信効率&lt;/strong>：JSONの約1/3のサイズ&lt;/li>
&lt;/ul>
&lt;h3 id="rpc技術選択の要点">RPC技術選択の要点
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>RPC = 広義概念&lt;/strong>：REST APIもgRPCもすべてRPC&lt;/li>
&lt;li>&lt;strong>実装は多様&lt;/strong>：プロトコル・データ形式・対象言語で差別化&lt;/li>
&lt;li>&lt;strong>選択は4軸判断&lt;/strong>：言語環境・通信頻度・データ量・開発効率&lt;/li>
&lt;li>&lt;strong>適材適所の活用&lt;/strong>：単一技術ではなく使い分けが重要&lt;/li>
&lt;/ul>
&lt;h3 id="技術選択の本質">技術選択の本質
&lt;/h3>&lt;p>重要なのは「&lt;strong>目的に応じた適切な技術選択&lt;/strong>」です。Protocol BufferもgRPCも、決して万能ではありません。プロジェクトの要件・チームの状況・運用の制約を総合的に判断し、最適な組み合わせを選ぶことが成功への鍵です。&lt;/p>
&lt;p>次回は、実際のProtocol Bufferスキーマ設計や、gRPCサービスの実装例について詳しく解説予定です。お楽しみに！&lt;/p>
&lt;hr>
&lt;p>&lt;strong>関連記事&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >Protocol Bufferスキーマ設計のベストプラクティス&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >gRPCサービス実装の実践的パターン&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >マイクロサービス間通信の技術選択フレームワーク&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>執筆日&lt;/strong>: 2025-08-25
&lt;strong>分類&lt;/strong>: 技術記事・アーキテクチャ・Protocol Buffer・RPC・gRPC・tRPC
&lt;strong>対象読者&lt;/strong>: ソフトウェアエンジニア・システムアーキテクト・マイクロサービス開発者&lt;/p></description></item><item><title>The Truth About Protocol Buffers: Complete Guide to Binary Encoding and RPC Technologies</title><link>https://firebird-techtalktech.com/post/the-truth-about-protocol-buffers-complete-guide-to-binary-encoding-and-rpc-technologies/</link><pubDate>Sun, 14 Sep 2025 13:20:00 +0900</pubDate><guid>https://firebird-techtalktech.com/post/the-truth-about-protocol-buffers-complete-guide-to-binary-encoding-and-rpc-technologies/</guid><description>&lt;h1 id="the-truth-about-protocol-buffers-complete-guide-to-binary-encoding-and-rpc-technologies">The Truth About Protocol Buffers: Complete Guide to Binary Encoding and RPC Technologies
&lt;/h1>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>&amp;ldquo;What is Protocol Buffer? Is it encryption?&amp;rdquo; &amp;ldquo;What&amp;rsquo;s the difference between gRPC and tRPC?&amp;rdquo;&lt;/p>
&lt;p>Have you ever had such questions? This article provides a detailed explanation from Protocol Buffer binary encoding principles to modern RPC technology comparison with practical examples.&lt;/p>
&lt;h2 id="-protocol-buffer-detailed-technical-analysis">🔧 Protocol Buffer Detailed Technical Analysis
&lt;/h2>&lt;h3 id="what-is-protocol-buffer">What is Protocol Buffer?
&lt;/h3>&lt;p>Protocol Buffer is an &lt;strong>efficient binary serialization technology for structured data&lt;/strong> developed by Google. The important thing to understand is that &amp;ldquo;it&amp;rsquo;s not encryption.&amp;rdquo; It&amp;rsquo;s an encoding technology aimed at &lt;strong>efficiency and compression&lt;/strong>.&lt;/p>
&lt;h3 id="the-core-of-binary-encoding-principles">The Core of Binary Encoding Principles
&lt;/h3>&lt;p>The biggest feature of Protocol Buffer is the &lt;strong>field number system&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Field number 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Field number 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Field number 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The meaning of this syntax:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Data type&lt;/strong>: &lt;code>string&lt;/code>&lt;/li>
&lt;li>&lt;strong>Field name&lt;/strong>: &lt;code>name&lt;/code> (not actually transmitted!)&lt;/li>
&lt;li>&lt;strong>Field number&lt;/strong>: &lt;code>2&lt;/code> (this is what&amp;rsquo;s actually transmitted)&lt;/li>
&lt;/ul>
&lt;h3 id="concrete-binary-analysis-example">Concrete Binary Analysis Example
&lt;/h3>&lt;p>Let&amp;rsquo;s see how it&amp;rsquo;s actually encoded.&lt;/p>
&lt;p>&lt;strong>Original data&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Protocol Buffer binary&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0A 05 41 6C 69 63 65 10 1A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Detailed analysis&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>0A 05&lt;/code>: Field 2 (name) start, length 5 bytes&lt;/li>
&lt;li>&lt;code>41 6C 69 63 65&lt;/code>: &amp;ldquo;Alice&amp;rdquo; string
&lt;ul>
&lt;li>&lt;code>41&lt;/code> = ASCII 65 = &amp;lsquo;A&amp;rsquo;&lt;/li>
&lt;li>&lt;code>6C&lt;/code> = ASCII 108 = &amp;rsquo;l'&lt;/li>
&lt;li>&lt;code>69&lt;/code> = ASCII 105 = &amp;lsquo;i&amp;rsquo;&lt;/li>
&lt;li>&lt;code>63&lt;/code> = ASCII 99 = &amp;lsquo;c&amp;rsquo;&lt;/li>
&lt;li>&lt;code>65&lt;/code> = ASCII 101 = &amp;rsquo;e'&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>10 1A&lt;/code>: Field 3 (age) = 26&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Efficiency proof&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>JSON: &lt;code>{&amp;quot;name&amp;quot;:&amp;quot;Alice&amp;quot;,&amp;quot;age&amp;quot;:26}&lt;/code> = 26 bytes&lt;/li>
&lt;li>Protocol Buffer: &lt;code>0A 05 41 6C 69 63 65 10 1A&lt;/code> = 9 bytes&lt;/li>
&lt;li>&lt;strong>About 3x more efficient!&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="clear-distinction-from-encryption">Clear Distinction from Encryption
&lt;/h3>&lt;p>This is a point where many people are confused:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Comparison&lt;/th>
&lt;th>Protocol Buffer&lt;/th>
&lt;th>Encryption&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Purpose&lt;/strong>&lt;/td>
&lt;td>Efficiency/Compression&lt;/td>
&lt;td>Security&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Recovery&lt;/strong>&lt;/td>
&lt;td>Easy (protoc &amp;ndash;decode)&lt;/td>
&lt;td>Requires secret key&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Readability&lt;/strong>&lt;/td>
&lt;td>Binary but clear structure&lt;/td>
&lt;td>Completely obscure&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Use case&lt;/strong>&lt;/td>
&lt;td>Communication efficiency&lt;/td>
&lt;td>Data protection&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="deprecatedreserved-standard-flow">deprecated/reserved Standard Flow
&lt;/h3>&lt;p>The true value of Protocol Buffer lies in gradual &lt;strong>schema evolution&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// Stage 1: Deprecation warning
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">deprecated&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="c1">// Stage 2: Complete deletion, permanent number reservation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reserved&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Field number permanently reserved
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">reserved&lt;/span> &lt;span class="s">&amp;#34;phone&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Field name permanently reserved
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This mechanism enables:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Backward compatibility&lt;/strong>: Works with old clients&lt;/li>
&lt;li>&lt;strong>Forward compatibility&lt;/strong>: Safely add new fields&lt;/li>
&lt;li>&lt;strong>Reuse prevention&lt;/strong>: reserved setting prevents misuse of same names/numbers&lt;/li>
&lt;/ul>
&lt;h2 id="-rpc-technology-architecture-comparison-analysis">🌐 RPC Technology Architecture Comparison Analysis
&lt;/h2>&lt;h3 id="broad-definition-of-rpc">Broad Definition of RPC
&lt;/h3>&lt;p>RPC (Remote Procedure Call) refers to &amp;ldquo;&lt;strong>all function calls over the network&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;p>These that we use regularly are actually all RPCs:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This is also RPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/api/users/123&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This is also RPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">trpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This is also RPC
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">GetUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="comparison-by-implementation-method">Comparison by Implementation Method
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>RPC Implementation&lt;/th>
&lt;th>Data Format&lt;/th>
&lt;th>Protocol&lt;/th>
&lt;th>Target Languages&lt;/th>
&lt;th>Transfer Size&lt;/th>
&lt;th>Typical Use Case&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>gRPC&lt;/strong>&lt;/td>
&lt;td>Protocol Buffer&lt;/td>
&lt;td>HTTP/2&lt;/td>
&lt;td>Multi-language&lt;/td>
&lt;td>✅Minimal&lt;/td>
&lt;td>Inter-microservice&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>tRPC&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>TypeScript only&lt;/td>
&lt;td>❌Large&lt;/td>
&lt;td>Frontend↔Backend (TS unified)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>REST&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>Universal&lt;/td>
&lt;td>❌Large&lt;/td>
&lt;td>General Web API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>GraphQL&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>HTTP/1.1&lt;/td>
&lt;td>Universal&lt;/td>
&lt;td>⚠️Medium&lt;/td>
&lt;td>Flexible query API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="4-axis-decision-framework-for-technology-selection">4-Axis Decision Framework for Technology Selection
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Language Environment&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Single language → tRPC&lt;/li>
&lt;li>Multi-language mixed → gRPC, REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Communication Frequency&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>High frequency, large volume → gRPC&lt;/li>
&lt;li>Low frequency, small volume → REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Data Volume&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Large capacity → Protocol Buffer&lt;/li>
&lt;li>Small capacity → JSON&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Development Efficiency&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Type safety emphasis → tRPC, gRPC&lt;/li>
&lt;li>Versatility emphasis → REST&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="actual-usage-strategy">Actual Usage Strategy
&lt;/h3>&lt;p>In actual product development, the following usage differentiation is effective:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="err">🏢&lt;/span> &lt;span class="n">Inter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">microservice&lt;/span> &lt;span class="n">communication&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">→&lt;/span> &lt;span class="n">gRPC&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Multi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">language&lt;/span> &lt;span class="n">environment&lt;/span> &lt;span class="n">like&lt;/span> &lt;span class="n">Go&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Java&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Python&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">🖥️&lt;/span> &lt;span class="n">Frontend&lt;/span> &lt;span class="n">communication&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">→&lt;/span> &lt;span class="n">Consider&lt;/span> &lt;span class="n">tRPC&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">TypeScript&lt;/span> &lt;span class="n">unified&lt;/span> &lt;span class="n">environment&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">→&lt;/span> &lt;span class="n">REST&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Existing&lt;/span> &lt;span class="n">systems&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">versatility&lt;/span> &lt;span class="n">emphasis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">🔌&lt;/span> &lt;span class="n">External&lt;/span> &lt;span class="n">API&lt;/span> &lt;span class="n">provision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">→&lt;/span> &lt;span class="n">REST&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Compatibility&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">ease&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">understanding&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">⚙️&lt;/span> &lt;span class="n">Admin&lt;/span> &lt;span class="n">panels&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">internal&lt;/span> &lt;span class="n">tools&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">→&lt;/span> &lt;span class="n">Regular&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="n">API&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Simplicity&lt;/span> &lt;span class="n">emphasis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="actual-performance-comparison">Actual Performance Comparison
&lt;/h3>&lt;p>When sending the same data using different methods:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Data Format&lt;/th>
&lt;th>Transfer Size&lt;/th>
&lt;th>Parse Speed&lt;/th>
&lt;th>Type Safety&lt;/th>
&lt;th>Human Readability&lt;/th>
&lt;th>Learning Cost&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>JSON&lt;/strong>&lt;/td>
&lt;td>❌Large (100%)&lt;/td>
&lt;td>❌Slow&lt;/td>
&lt;td>❌Weak&lt;/td>
&lt;td>✅High&lt;/td>
&lt;td>✅Low&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MessagePack&lt;/strong>&lt;/td>
&lt;td>⚠️Medium (60%)&lt;/td>
&lt;td>⚠️Medium&lt;/td>
&lt;td>❌Weak&lt;/td>
&lt;td>❌Low&lt;/td>
&lt;td>⚠️Medium&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Protocol Buffer&lt;/strong>&lt;/td>
&lt;td>✅Small (30%)&lt;/td>
&lt;td>✅Fast&lt;/td>
&lt;td>✅Strong&lt;/td>
&lt;td>❌Low&lt;/td>
&lt;td>❌High&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="practical-selection-guidelines">Practical Selection Guidelines
&lt;/h2>&lt;h3 id="when-to-choose-grpc">When to Choose gRPC
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ High-frequency communication between microservices
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Multi-language environment (Go, Java, Python, C++, etc.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Performance top priority
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Strict type safety required
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="when-to-choose-trpc">When to Choose tRPC
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ Both frontend and backend use TypeScript
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Development efficiency and developer experience priority
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ High TypeScript proficiency across the team
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Communication volume not extremely high
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="when-to-choose-rest">When to Choose REST
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">✅ Providing external APIs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Minimizing team learning costs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Compatibility with existing systems priority
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✅ Debugging and troubleshooting emphasis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="summary">Summary
&lt;/h2>&lt;h3 id="core-of-protocol-buffer">Core of Protocol Buffer
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Binary encoding&lt;/strong>: Efficiency technology, not encryption&lt;/li>
&lt;li>&lt;strong>Field number system&lt;/strong>: Identification by numbers, not names&lt;/li>
&lt;li>&lt;strong>Gradual schema evolution&lt;/strong>: deprecated→reserved flow&lt;/li>
&lt;li>&lt;strong>Outstanding communication efficiency&lt;/strong>: About 1/3 the size of JSON&lt;/li>
&lt;/ul>
&lt;h3 id="key-points-of-rpc-technology-selection">Key Points of RPC Technology Selection
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>RPC = Broad concept&lt;/strong>: REST API and gRPC are all RPC&lt;/li>
&lt;li>&lt;strong>Diverse implementations&lt;/strong>: Differentiated by protocol, data format, target languages&lt;/li>
&lt;li>&lt;strong>4-axis decision&lt;/strong>: Language environment, communication frequency, data volume, development efficiency&lt;/li>
&lt;li>&lt;strong>Appropriate use&lt;/strong>: Using different technologies rather than a single solution&lt;/li>
&lt;/ul>
&lt;h3 id="essence-of-technology-selection">Essence of Technology Selection
&lt;/h3>&lt;p>What&amp;rsquo;s important is &amp;ldquo;&lt;strong>appropriate technology selection according to purpose&lt;/strong>&amp;rdquo;. Protocol Buffer and gRPC are not silver bullets. The key to success is comprehensively judging project requirements, team situation, and operational constraints to select the optimal combination.&lt;/p>
&lt;p>Next time, we plan to explain Protocol Buffer schema design and practical gRPC service implementation patterns in detail. Stay tuned!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Related Articles&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >Protocol Buffer Schema Design Best Practices&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >Practical gRPC Service Implementation Patterns&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://firebird-techtalktech.com/" >Technology Selection Framework for Inter-Microservice Communication&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Written on&lt;/strong>: 2025-08-25
&lt;strong>Category&lt;/strong>: Technical Articles・Architecture・Protocol Buffer・RPC・gRPC・tRPC
&lt;strong>Target Audience&lt;/strong>: Software Engineers・System Architects・Microservice Developers&lt;/p></description></item></channel></rss>