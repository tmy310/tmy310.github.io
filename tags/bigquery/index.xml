<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bigquery on firebirdテクテクテクブログ</title><link>https://firebird-techtalktech.com/tags/bigquery/</link><description>Recent content in Bigquery on firebirdテクテクテクブログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>トミー</copyright><lastBuildDate>Sat, 04 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://firebird-techtalktech.com/tags/bigquery/index.xml" rel="self" type="application/rss+xml"/><item><title>Conversational Analytics API パブリックプレビュー概要紹介</title><link>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</link><pubDate>Sat, 04 Oct 2025 00:00:00 +0000</pubDate><guid>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</guid><description>&lt;p&gt;承知いたしました。 「GitHub FlowとTrunk-Based開発の違い」について、10分程度で読める技術記事風にまとめました。
GitHub Flow vs. Trunk-Based開発：あなたのチームに最適なワークフローは？
ソフトウェア開発において、Gitのワークフローはチームの生産性とコードの品質を左右する重要な要素です。世の中には様々なワークフローが存在しますが、今回は特に頻繁に比較される「GitHub Flow」と「Trunk-Based Development」に焦点を当て、その違いと、それぞれのメリット・デメリットを解説します。&lt;/p&gt;
&lt;p&gt;開発スタイルを分ける2つのアプローチ
まず、両者の根本的な違いは「メインブランチへのマージ頻度」にあります。
Trunk-Based Development（トランクベース開発）
このアプローチの最大の特徴は、すべての開発者がmain（またはtrunk）という単一のメインブランチに、ごく短い期間で頻繁にコミット（マージ）することです。
特徴:
フィーチャーは非常に短い期間のブランチ（数時間～1日程度）で開発されます。
開発者は、自身の変更を迅速にmainブランチに統合します。
常にmainブランチが「デプロイ可能」な状態に保たれるよう、厳格なテストとCI/CDパイプラインが不可欠です。
メリット:
継続的な統合: 変更が常に統合されるため、マージコンフリクトが最小限に抑えられます。
迅速なフィードバック: 問題が発生した場合でも、原因特定が容易で、迅速に修正できます。
リリースサイクルの短縮: いつでもデプロイできるため、市場への投入が早まります。
GitHub Flow
GitHubが提唱したこのワークフローは、**プルリクエスト（PR）**を軸にした、ブランチベースの開発モデルです。
特徴:
新機能やバグ修正ごとに、mainブランチから新しいフィーチャーブランチを作成します。
作業が完了したらプルリクエストを作成し、コードレビューを経てからmainブランチにマージします。
多くの場合、develop、staging、productionといった複数の環境ブランチを設けて、段階的に変更をテスト・デプロイします。
メリット:
厳格なレビュープロセス: マージ前に必ずレビューが行われるため、コードの品質を保ちやすいです。
リスクの隔離: 複数のフィーチャーを統合するdevelopブランチや、本番環境の最終確認を行うstagingブランチを設けることで、段階的にリスクを減らせます。
柔軟なリリース制御: 安定したproductionブランチを維持しつつ、必要に応じてstagingブランチの内容をリリースできます。&lt;/p&gt;
&lt;p&gt;あなたのチームが採用しているのは？
冒頭の質問に戻ると、あなたのチームのdevelop → staging → productionというマージフローは、典型的なGitHub Flowの運用形態です。
これは「まとめて作業を実施する」というよりは、「段階的なテストとデプロイ」を重視しているため、このようなフローになっています。
develop: 複数のフィーチャーを統合し、初期の結合テストを行う場。
staging: 本番環境に近い状態で、最終的なユーザー受け入れテスト（UAT）や性能テストを行う場。
production: ライブ環境。このブランチへのマージは、いよいよ本番リリースを意味します。
この多段階のプロセスは、特にユーザーへの影響が大きいアプリケーションや、大規模なチームでの開発において、リスクを最小限に抑えるための合理的な選択と言えます。
まとめ&lt;/p&gt;
&lt;p&gt;Trunk-Based Development
GitHub Flow
マージ頻度
非常に高い（毎日複数回）
比較的低い（PRごとに都度）
主な目的
継続的な統合、迅速なデリバリー
リスク管理、厳格なレビュー
適したチーム
小規模～中規模、高い自動化レベルのチーム
大規模、複雑なアプリケーションを開発するチーム
主な課題
高度なCI/CDパイプラインが必要
マージ作業の複雑化、リリースが遅れる可能性
どちらのワークフローも、それぞれメリットとデメリットがあります。あなたのチームが何を最も重視するかによって、最適な選択は異なります。重要なのは、チーム全体が共通のワークフローを理解し、そのルールに従って一貫した開発を進めることです。
承知いたしました。 「GitHub FlowとTrunk-Based開発の違い」について、10分程度で読める技術記事風にまとめました。
GitHub Flow vs. Trunk-Based開発：あなたのチームに最適なワークフローは？
ソフトウェア開発において、Gitのワークフローはチームの生産性とコードの品質を左右する重要な要素です。世の中には様々なワークフローが存在しますが、今回は特に頻繁に比較される「GitHub Flow」と「Trunk-Based Development」に焦点を当て、その違いと、それぞれのメリット・デメリットを解説します。&lt;/p&gt;
&lt;p&gt;開発スタイルを分ける2つのアプローチ
まず、両者の根本的な違いは「メインブランチへのマージ頻度」にあります。
Trunk-Based Development（トランクベース開発）
このアプローチの最大の特徴は、すべての開発者がmain（またはtrunk）という単一のメインブランチに、ごく短い期間で頻繁にコミット（マージ）することです。
特徴:
フィーチャーは非常に短い期間のブランチ（数時間～1日程度）で開発されます。
開発者は、自身の変更を迅速にmainブランチに統合します。
常にmainブランチが「デプロイ可能」な状態に保たれるよう、厳格なテストとCI/CDパイプラインが不可欠です。
メリット:
継続的な統合: 変更が常に統合されるため、マージコンフリクトが最小限に抑えられます。
迅速なフィードバック: 問題が発生した場合でも、原因特定が容易で、迅速に修正できます。
リリースサイクルの短縮: いつでもデプロイできるため、市場への投入が早まります。
GitHub Flow
GitHubが提唱したこのワークフローは、**プルリクエスト（PR）**を軸にした、ブランチベースの開発モデルです。
特徴:
新機能やバグ修正ごとに、mainブランチから新しいフィーチャーブランチを作成します。
作業が完了したらプルリクエストを作成し、コードレビューを経てからmainブランチにマージします。
多くの場合、develop、staging、productionといった複数の環境ブランチを設けて、段階的に変更をテスト・デプロイします。
メリット:
厳格なレビュープロセス: マージ前に必ずレビューが行われるため、コードの品質を保ちやすいです。
リスクの隔離: 複数のフィーチャーを統合するdevelopブランチや、本番環境の最終確認を行うstagingブランチを設けることで、段階的にリスクを減らせます。
柔軟なリリース制御: 安定したproductionブランチを維持しつつ、必要に応じてstagingブランチの内容をリリースできます。&lt;/p&gt;
&lt;p&gt;あなたのチームが採用しているのは？
冒頭の質問に戻ると、あなたのチームのdevelop → staging → productionというマージフローは、典型的なGitHub Flowの運用形態です。
これは「まとめて作業を実施する」というよりは、「段階的なテストとデプロイ」を重視しているため、このようなフローになっています。
develop: 複数のフィーチャーを統合し、初期の結合テストを行う場。
staging: 本番環境に近い状態で、最終的なユーザー受け入れテスト（UAT）や性能テストを行う場。
production: ライブ環境。このブランチへのマージは、いよいよ本番リリースを意味します。
この多段階のプロセスは、特にユーザーへの影響が大きいアプリケーションや、大規模なチームでの開発において、リスクを最小限に抑えるための合理的な選択と言えます。
まとめ&lt;/p&gt;
&lt;p&gt;Trunk-Based Development
GitHub Flow
マージ頻度
非常に高い（毎日複数回）
比較的低い（PRごとに都度）
主な目的
継続的な統合、迅速なデリバリー
リスク管理、厳格なレビュー
適したチーム
小規模～中規模、高い自動化レベルのチーム
大規模、複雑なアプリケーションを開発するチーム
主な課題
高度なCI/CDパイプラインが必要
マージ作業の複雑化、リリースが遅れる可能性
どちらのワークフローも、それぞれメリットとデメリットがあります。あなたのチームが何を最も重視するかによって、最適な選択は異なります。重要なのは、チーム全体が共通のワークフローを理解し、そのルールに従って一貫した開発を進めることです。&lt;/p&gt;</description></item><item><title>Conversational Analytics API パブリックプレビュー概要紹介</title><link>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</link><pubDate>Sat, 04 Oct 2025 00:00:00 +0000</pubDate><guid>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</guid><description>&lt;p&gt;title: &amp;ldquo;サブモジュール経由で発生するソースコード漏えいの落とし穴と対策&amp;rdquo;
description: &amp;ldquo;Git submodule のリモート誤設定や push 振る舞いが引き起こす情報漏えいの実例と、即時ロックから恒久対策までの実践ガイド。&amp;rdquo;
date: 2025-09-24T09:00:00+09:00
slug: git-submodule-source-leak
tags: [&amp;ldquo;Git&amp;rdquo;, &amp;ldquo;GitHub&amp;rdquo;, &amp;ldquo;Security&amp;rdquo;, &amp;ldquo;Submodule&amp;rdquo;, &amp;ldquo;DevSecOps&amp;rdquo;]
categories: [&amp;ldquo;テック&amp;rdquo;]
draft: false
TL;DR: サブモジュールは独立した Git リポジトリです。サブモジュール配下で origin を「自分が書き込める Public リポジトリ」に向けたまま push すると、その中身は即時に公開されます。さらに親リポジトリの push.recurseSubmodules や pre-push フックの実装次第では、親で git push しただけでサブモジュールが push され、意図せず漏えいが起こり得ます。&lt;/p&gt;
&lt;p&gt;背景
モノレポやサイト構築（Hugo など）で外部テーマ／ライブラリを submodule として取り込むのは一般的です。しかし、サブモジュールは“別リポジトリ”そのものであり、配下で git remote set-url origin &amp;hellip; を変えれば、単独で push できます。この性質と、親の push 時の挙動（push.recurseSubmodules、pre-push フック、CI スクリプト）が組み合わさると、気づかないうちに第三者の Public リポジトリへコードが押し出される危険があります。&lt;/p&gt;
&lt;p&gt;よくある漏えいシナリオ
flowchart TB
A[開発者が親リポで作業] &amp;ndash;&amp;gt; B[サブモジュール内で修正]
B &amp;ndash;&amp;gt; C[サブモジュール内の origin を自分の Public リポに変更]
C &amp;ndash;&amp;gt; D{親で git push}
D &amp;ndash;&amp;gt;|on-demand/フックが push| E[サブモジュールも push]
E &amp;ndash;&amp;gt; F[Public リポに中身が公開]&lt;/p&gt;
&lt;p&gt;トリガーA: サブモジュール内で origin を書き込み可能な Public リポジトリに設定&lt;/p&gt;
&lt;p&gt;トリガーB: 親で git push した際に&lt;/p&gt;
&lt;p&gt;push.recurseSubmodules=on-demand で「参照コミットがリモートに無ければサブモジュールも push」&lt;/p&gt;
&lt;p&gt;あるいは pre-push フックが git submodule foreach などで push を試みる&lt;/p&gt;
&lt;p&gt;すぐできる被害最小化（即時ロック）
親リポジトリでサブモジュール push を止める:&lt;/p&gt;
&lt;h1 id="親リポで-サブモジュールを-push-対象にしない"&gt;親リポで: サブモジュールを push 対象にしない
&lt;/h1&gt;&lt;p&gt;git config push.recurseSubmodules no&lt;/p&gt;
&lt;h1 id="push-のドライラン癖付け"&gt;push のドライラン癖付け
&lt;/h1&gt;&lt;p&gt;git push &amp;ndash;dry-run origin main&lt;/p&gt;
&lt;p&gt;各サブモジュールで push を物理的に無効化（安全策）:&lt;/p&gt;
&lt;h1 id="ルートで実行-すべてのサブモジュールの-pushurl-を無効化"&gt;ルートで実行: すべてのサブモジュールの pushURL を無効化
&lt;/h1&gt;&lt;h1 id="fetch-url-はそのまま"&gt;(fetch URL はそのまま)
&lt;/h1&gt;&lt;p&gt;git config -f .gitmodules &amp;ndash;get-regexp &amp;lsquo;^submodule..*.path$&amp;rsquo; |
while read -r _ path; do
echo &amp;ldquo;Locking $path&amp;rdquo;
git -C &amp;ldquo;$path&amp;rdquo; remote set-url &amp;ndash;push origin DISABLED || true
hookdir=&amp;quot;$(git -C &amp;ldquo;$path&amp;rdquo; rev-parse &amp;ndash;git-dir)/hooks&amp;quot;
mkdir -p &amp;ldquo;$hookdir&amp;rdquo;
cat &amp;gt; &amp;ldquo;$hookdir/pre-push&amp;rdquo; &amp;laquo;&amp;lsquo;SH&amp;rsquo;
#!/bin/sh
echo &amp;ldquo;ERROR: Pushing from this submodule is disabled.&amp;rdquo; &amp;gt;&amp;amp;2
exit 1
SH
chmod +x &amp;ldquo;$hookdir/pre-push&amp;rdquo;
done&lt;/p&gt;
&lt;p&gt;これでサブモジュール直下での git push は常に失敗し、誤操作やフック経由の push も止まります。&lt;/p&gt;
&lt;p&gt;恒久対策（レイヤ別）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;設定レイヤ（Git）
親リポ: git config push.recurseSubmodules no をデフォルトに&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;サブモジュール URL の整合性: git submodule sync &amp;ndash;recursive&lt;/p&gt;
&lt;p&gt;危険 URL のブロック（親の pre-push フック）：&lt;/p&gt;
&lt;h1 id="githookspre-push-親リポ"&gt;.git/hooks/pre-push （親リポ）
&lt;/h1&gt;&lt;p&gt;#!/bin/sh
set -e
url=$(git remote get-url &amp;ndash;push origin 2&amp;gt;/dev/null || echo &amp;ldquo;&amp;rdquo;)
case &amp;ldquo;$url&amp;rdquo; in
&lt;a class="link" href="mailto:git@github.com" &gt;git@github.com&lt;/a&gt;:your-org/&lt;em&gt;|https://github.com/your-org/&lt;/em&gt;) ;;
*) echo &amp;ldquo;ERROR: Blocked push to non-allowed remote: $url&amp;rdquo; &amp;gt;&amp;amp;2; exit 1;;
esac&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;リポジトリレイヤ（GitHub 側）
Private 化（フォークやミラーも）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Protected Branch（強制 push 禁止、PR 必須、レビュー必須）&lt;/p&gt;
&lt;p&gt;Secret Scanning / Push Protection を有効化&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;CI レイヤ（検知）
GitHub Actionsで誤 push を検知・ブロック:
name: guard-visibility
on: [push]
jobs:
check:
runs-on: ubuntu-latest
steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: Fail if repo is public
if: ${{ !github.event.repository.private }}
run: |
echo &amp;ldquo;Repository is public. Aborting.&amp;rdquo; &amp;gt;&amp;amp;2
exit 1&lt;/li&gt;
&lt;li&gt;uses: actions/checkout@v4&lt;/li&gt;
&lt;li&gt;name: Allowlist push target
run: |
url=$(git remote get-url &amp;ndash;push origin || true)
case &amp;ldquo;$url&amp;rdquo; in
&lt;a class="link" href="mailto:git@github.com" &gt;git@github.com&lt;/a&gt;:your-org/&lt;em&gt;|https://github.com/your-org/&lt;/em&gt;) ;;
*) echo &amp;ldquo;Blocked remote: $url&amp;rdquo; &amp;gt;&amp;amp;2; exit 1;;
esac&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;運用レイヤ（人の習慣）
git remote -v／git remote get-url &amp;ndash;push origin をpush 前に確認&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git push &amp;ndash;dry-run を毎回実行&lt;/p&gt;
&lt;p&gt;サブモジュールに変更を加える場合は 必ずフォークを Private で作る → .gitmodules をフォーク URL に変更 → PR&lt;/p&gt;
&lt;p&gt;兆候と検知ポイント
git push 時に 予期しないリモート URL がログに出る（例: 第三者のテーマ作者のリポ）&lt;/p&gt;
&lt;p&gt;pre-push / CI ログに サブモジュールでの push 成功の痕跡&lt;/p&gt;
&lt;p&gt;GitHub の 監査ログ／Contributors に意図しない push 履歴&lt;/p&gt;
&lt;p&gt;調査ワンライナー:&lt;/p&gt;
&lt;h1 id="親の-push-先"&gt;親の push 先
&lt;/h1&gt;&lt;p&gt;git remote -v | sed -n &amp;lsquo;/origin/p&amp;rsquo;&lt;/p&gt;
&lt;h1 id="すべてのサブモジュールの-fetchpush-先一覧"&gt;すべてのサブモジュールの fetch/push 先一覧
&lt;/h1&gt;&lt;p&gt;git config -f .gitmodules &amp;ndash;get-regexp &amp;lsquo;^submodule..*.path$&amp;rsquo; |
while read -r _ path; do
echo &amp;ldquo;[$path]&amp;rdquo;; git -C &amp;ldquo;$path&amp;rdquo; remote -v; echo
done&lt;/p&gt;
&lt;p&gt;よくある質問（FAQ）
Q. リポジトリが Public か Private かで差はある？
A. 公開可否と書き込み権限は別です。Public でも あなたに書き込み権限がなければ push できず、403 で止まります。逆に Public で書き込める先に向いていれば、即座に誰でも読める状態になります。
Q. &amp;ndash;no-verify を付けても止まらないのは？
A. &amp;ndash;no-verify は フックの実行抑止だけです。origin の向き先が第三者リポであれば素通りしてしまうため、URL ガード（pre-push 内の URL 判定）と pushURL の無効化 を合わせ技で使います。
Q. サブモジュールの “detached HEAD” は問題？
A. サブモジュールとしては 正常です。問題は どこに push され得るか です。&lt;/p&gt;
&lt;p&gt;ベストプラクティス：Read‑Only 運用 + PR フロー
結論: 外部のサブモジュールは read‑only に保ち、変更が必要になったら「別途 clone（またはフォーク）→ 修正 → 上流へ PR」。親リポには 参照コミットだけ を更新します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Read‑Only の基本設定（親とサブモジュール）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="親-サブモジュールを-push-対象にしない"&gt;親: サブモジュールを push 対象にしない
&lt;/h1&gt;&lt;p&gt;git config push.recurseSubmodules no&lt;/p&gt;
&lt;h1 id="サブモジュール側-push-を物理的に無効化誤操作防止"&gt;サブモジュール側: push を物理的に無効化（誤操作防止）
&lt;/h1&gt;&lt;p&gt;git -C &lt;submodule-path&gt; remote set-url &amp;ndash;push origin DISABLED
cat &amp;gt; &amp;ldquo;$(git -C &lt;submodule-path&gt; rev-parse &amp;ndash;git-dir)/hooks/pre-push&amp;rdquo; &amp;laquo;&amp;lsquo;SH&amp;rsquo;
#!/bin/sh
echo &amp;ldquo;ERROR: Pushing from this submodule is disabled.&amp;rdquo; &amp;gt;&amp;amp;2
exit 1
SH
chmod +x &amp;ldquo;$(git -C &lt;submodule-path&gt; rev-parse &amp;ndash;git-dir)/hooks/pre-push&amp;rdquo;&lt;/p&gt;
&lt;h1 id="url-の整合を保つgitmodules--ローカルへ反映"&gt;URL の整合を保つ（.gitmodules → ローカルへ反映）
&lt;/h1&gt;&lt;p&gt;git submodule sync &amp;ndash;recursive&lt;/p&gt;
&lt;p&gt;.gitmodules は原典（upstream）URLのまま。サブモジュール直下では push しない運用にします。
2) 変更が必要になったときの手順（別途 clone → PR）&lt;/p&gt;
&lt;h1 id="1-自分の作業ディレクトリで上流のリポジトリをフォーク-or-直接-clone"&gt;1) 自分の作業ディレクトリで、上流のリポジトリをフォーク or 直接 clone
&lt;/h1&gt;&lt;h1 id="-機微が混じる可能性があるならフォークは-private-推奨"&gt;※ 機微が混じる可能性があるならフォークは Private 推奨
&lt;/h1&gt;&lt;h1 id="例-フォークを-clone"&gt;例: フォークを clone
&lt;/h1&gt;&lt;p&gt;git clone &lt;a class="link" href="mailto:git@github.com" &gt;git@github.com&lt;/a&gt;:&lt;you&gt;/&lt;forked-repo&gt;.git
cd &lt;forked-repo&gt;&lt;/p&gt;
&lt;p&gt;git remote add upstream &lt;a class="link" href="https://github.com/" target="_blank" rel="noopener"
&gt;https://github.com/&lt;/a&gt;&lt;upstream-owner&gt;/&lt;upstream-repo&gt;.git&lt;/p&gt;
&lt;p&gt;git checkout -b fix/your-change&lt;/p&gt;
&lt;h1 id="-変更-"&gt;&amp;hellip; 変更 &amp;hellip;
&lt;/h1&gt;&lt;p&gt;git commit -s -m &amp;ldquo;fix: &lt;summary&gt;&amp;rdquo;
git push -u origin HEAD&lt;/p&gt;
&lt;h1 id="github-で-originupstream-への-pr-を作成"&gt;GitHub で origin→upstream への PR を作成
&lt;/h1&gt;&lt;p&gt;PR が upstream にマージ された後、親リポで参照コミットを更新します：
cd /path/to/parent&lt;/p&gt;
&lt;h1 id="サブモジュールで最新を取得"&gt;サブモジュールで最新を取得
&lt;/h1&gt;&lt;p&gt;git -C &lt;submodule-path&gt; fetch &amp;ndash;tags &amp;ndash;all&lt;/p&gt;
&lt;h1 id="目的のコミットまたはタグへ移動"&gt;目的のコミット(またはタグ)へ移動
&lt;/h1&gt;&lt;p&gt;git -C &lt;submodule-path&gt; checkout &lt;merge-commit-or-tag&gt;&lt;/p&gt;
&lt;h1 id="親にポインタ更新を記録"&gt;親にポインタ更新を記録
&lt;/h1&gt;&lt;p&gt;git add &lt;submodule-path&gt;
git commit -m &amp;ldquo;chore(submodule): bump &lt;name&gt; to &amp;lt;sha/tag&amp;gt;&amp;rdquo;
git push&lt;/p&gt;
&lt;p&gt;※ .gitmodules に branch = main を設定していれば、git submodule update &amp;ndash;remote &lt;path&gt; で「そのブランチの最新へ」上げることも可能です（明示運用推奨）。
3) どうしても PR を待てない場合（代替案）
オーバーレイ: 親の layouts/ / assets/ 等で上書き（Hugo などで有効）。&lt;/p&gt;
&lt;p&gt;パッチ適用: 親レポに patches/ を置き、git apply/git am を CI/ローカルで当てる。サブモジュール自体は upstream のまま。&lt;/p&gt;
&lt;p&gt;いずれの方法でも、サブモジュール配下からの push は不要です。&lt;/p&gt;
&lt;p&gt;まとめ
サブモジュールは独立リポ。origin が Public かつ書き込み可であれば即漏えい。&lt;/p&gt;
&lt;p&gt;親の push.recurseSubmodules=no、サブモジュール pushURL 無効化、pre-push の URL Allowlist で 多層防御 を。&lt;/p&gt;
&lt;p&gt;CI と運用ルールで最後の見張りを置いて、ヒューマンエラーを吸収する。&lt;/p&gt;
&lt;p&gt;付録: チェックリスト（配布用）
親: git remote -v で push 先を確認&lt;/p&gt;
&lt;p&gt;親: git config push.recurseSubmodules が no&lt;/p&gt;
&lt;p&gt;サブモジュール: remote -v で pushURL が DISABLED（または Private）&lt;/p&gt;
&lt;p&gt;親 .git/hooks/pre-push に URL Allowlist 実装&lt;/p&gt;
&lt;p&gt;GitHub: Private + Protected Branch + Secret Scanning&lt;/p&gt;
&lt;p&gt;CI: 可視性チェック + リモート Allowlist&lt;/p&gt;
&lt;p&gt;運用: git push &amp;ndash;dry-run を習慣化&lt;/p&gt;
&lt;p&gt;本記事のサンプルスクリプトは 自己責任でお試しください。組織のポリシーに合わせて、許可ドメインやブランチ名、CI 条件を調整してください。&lt;/p&gt;</description></item><item><title>Conversational Analytics API パブリックプレビュー概要紹介</title><link>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</link><pubDate>Sat, 04 Oct 2025 00:00:00 +0000</pubDate><guid>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</guid><description>&lt;hr&gt;
&lt;h2 id="draft-false"&gt;title: &amp;ldquo;GitHub Pagesに独自ドメインを割り当てる手順とDNSの基礎（レジストラ/レジストリ/NSの関係）&amp;rdquo;
date: 2025-09-24T00:00:00+09:00
slug: github-pages-domain-dns-basics
summary: &amp;ldquo;GitHub Pages に独自ドメインを割り当てるための最短手順と、レジストラ・レジストリ・権威DNS・NSレコードなどの用語関係を図解で整理。初心者でも“どこで何を設定するか”がわかるようにまとめました。&amp;rdquo;
author: &amp;ldquo;anonymous&amp;rdquo;
categories: [&amp;ldquo;インフラ&amp;rdquo;]
tags: [&amp;ldquo;DNS&amp;rdquo;,&amp;ldquo;ドメイン&amp;rdquo;,&amp;ldquo;GitHub Pages&amp;rdquo;,&amp;ldquo;レジストラ&amp;rdquo;,&amp;ldquo;レジストリ&amp;rdquo;,&amp;ldquo;NSレコード&amp;rdquo;]
draft: false
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;この記事は匿名の個人メモです。&lt;/strong&gt; 例として &lt;code&gt;example.com&lt;/code&gt; / &lt;code&gt;www.example.com&lt;/code&gt; と &lt;code&gt;username.github.io&lt;/code&gt; を使用します。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id="0-まず結論最短手順"&gt;0. まず結論（最短手順）
&lt;/h1&gt;&lt;p&gt;GitHub Pages に独自ドメインをつなぐ最小セットはこれだけ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GitHub&lt;/strong&gt;（リポジトリ → &lt;em&gt;Settings → Pages&lt;/em&gt;）で &lt;strong&gt;Custom domain&lt;/strong&gt; に &lt;code&gt;example.com&lt;/code&gt; を保存（&lt;code&gt;CNAME&lt;/code&gt; ファイルが自動作成される場合あり）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**DNS（権威DNSの管理画面）**でレコードを追加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Apex（&lt;code&gt;example.com&lt;/code&gt;）&lt;/strong&gt; … &lt;strong&gt;A&lt;/strong&gt; を4件、&lt;strong&gt;AAAA&lt;/strong&gt; を4件（IPv6対応時）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A 185.199.108.153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A 185.199.109.153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A 185.199.110.153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;A 185.199.111.153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;AAAA 2606:50c0:8000::153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;AAAA 2606:50c0:8001::153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;AAAA 2606:50c0:8002::153
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;AAAA 2606:50c0:8003
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;ApexにCNAMEは置けません。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;www（&lt;code&gt;www.example.com&lt;/code&gt;）&lt;/strong&gt; … &lt;strong&gt;CNAME&lt;/strong&gt; を &lt;code&gt;username.github.io&lt;/code&gt; に向ける（末尾ドット不要）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTPS を有効化&lt;/strong&gt;（GitHub Pages の &lt;em&gt;Enforce HTTPS&lt;/em&gt; をON）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ 反映後、&lt;code&gt;example.com&lt;/code&gt; / &lt;code&gt;www.example.com&lt;/code&gt; のどちらでも Pages サイトに到達します。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="1-用語の整理誰が何をしている"&gt;1. 用語の整理：誰が何をしている？
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Registrant（登録者）&lt;/strong&gt; … あなた。ドメインの所有者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Registrar（レジストラ）&lt;/strong&gt; … ドメインの“販売・窓口”。例：お名前.com, Route 53 Domains, Cloudflare Registrar など。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Registry（レジストリ）&lt;/strong&gt; … TLD を運用する主体。例：&lt;code&gt;.com&lt;/code&gt; の Verisign、&lt;code&gt;.jp&lt;/code&gt; の JPRS。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authoritative DNS（権威DNS）&lt;/strong&gt; … そのドメインの&lt;strong&gt;最終的な答え&lt;/strong&gt;（A/AAAA/CNAME/MX/TXT…）を返すDNS。例：&lt;code&gt;01–04.dnsv.jp&lt;/code&gt;（お名前.com DNS）、Cloudflare DNS、Route 53 Hosted Zone など。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recursive Resolver（再帰DNS）&lt;/strong&gt; … 8.8.8.8 / 1.1.1.1 など。クライアントの代わりに辿って答えをキャッシュしてくれる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NSレコード（Name Server）&lt;/strong&gt; … 「このドメインの&lt;strong&gt;権威DNSはどれか&lt;/strong&gt;」を親ゾーンに教える“委任”情報。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DSレコード&lt;/strong&gt; … DNSSEC を使う場合、親ゾーンに登録する検証用情報。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ポイント：&lt;strong&gt;レジストラ&lt;/strong&gt;は必ずしも自社DNSを提供するわけではありませんが、多くは&lt;strong&gt;権威DNSサービスも提供&lt;/strong&gt;しています（お名前.comの &lt;code&gt;dnsv.jp&lt;/code&gt; など）。一方、Cloudflare や Route 53 は「レジストラ機能」も「権威DNS」も提供可能です。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id="2-名前解決の全体像ざっくり図解"&gt;2. 名前解決の全体像（ざっくり図解）
&lt;/h1&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ブラウザ/OS → 再帰DNS
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├─ ルート(.) … 「.comの権威NSはどこ？」
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├─ .com（レジストリ） … 「example.comの権威NSは ns1.example-dns.tld など」
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├─ ns*.example-dns.tld（権威DNS） … 「A/AAAA/CNAME など最終回答」
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; └─ 返ってきた複数IPのうち1つへ接続（失敗時は他IPへフォールバック）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NSレコード&lt;/strong&gt;は「どこに聞くか」を指す&lt;strong&gt;案内板&lt;/strong&gt;。A/AAAA/CNAMEといった&lt;strong&gt;中身の答え&lt;/strong&gt;は&lt;strong&gt;権威DNS&lt;/strong&gt;が持っています。&lt;/li&gt;
&lt;li&gt;複数のAレコードを返した場合、&lt;strong&gt;どのIPに接続するかはクライアント側&lt;/strong&gt;（OS/ブラウザ）の実装次第（順番に試す・並行接続・失敗時切替など）。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id="3-github-pages--独自ドメイン具体手順"&gt;3. GitHub Pages × 独自ドメイン：具体手順
&lt;/h1&gt;&lt;h2 id="31-github-側の設定"&gt;3.1 GitHub 側の設定
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;リポジトリ → &lt;strong&gt;Settings → Pages&lt;/strong&gt; → &lt;strong&gt;Custom domain&lt;/strong&gt; に &lt;code&gt;example.com&lt;/code&gt; を保存。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブランチ公開の場合、ルートに &lt;code&gt;CNAME&lt;/code&gt; ファイル（中身は &lt;code&gt;example.com&lt;/code&gt; 1行）が自動コミットされるケースがあります。&lt;/li&gt;
&lt;li&gt;Actions 等で発行する場合は &lt;code&gt;CNAME&lt;/code&gt; ファイルをビルド成果物に含めない運用も可（Pages の設定でドメインを登録してあればOK）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enforce HTTPS&lt;/strong&gt; をON（Let’s Encrypt による証明書が自動発行）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="32-dns-側の設定権威dnsの画面"&gt;3.2 DNS 側の設定（権威DNSの画面）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Apex（&lt;code&gt;example.com&lt;/code&gt;）&lt;/strong&gt;：A を4件、可能なら AAAA も4件（上記一覧を転記）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;www（&lt;code&gt;www.example.com&lt;/code&gt;）&lt;/strong&gt;：CNAME → &lt;code&gt;username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ApexにCNAMEは不可&lt;/em&gt;。もし DNS が &lt;strong&gt;ALIAS / ANAME&lt;/strong&gt; をサポートしているなら、それを &lt;code&gt;username.github.io&lt;/code&gt; に向けてもOK（提供事業者による）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="33-反映確認dig-例"&gt;3.3 反映確認（dig 例）
&lt;/h2&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 委任（親 .com の見解）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;dig NS example.com @a.gtld-servers.net +short
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 実レコード（権威DNSからの答え）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;dig example.com A +short
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;dig example.com AAAA +short
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;dig www.example.com CNAME +short
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id="4-よくある疑問と注意点"&gt;4. よくある疑問と注意点
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Q1. Aレコードは1つでも動く？&lt;/strong&gt;
→ 動くことはありますが、&lt;strong&gt;4つ全部&lt;/strong&gt;（&lt;code&gt;185.199.108.153–111.153&lt;/code&gt;）を入れるのが実務推奨。冗長化・フォールバックに効きます。IPv6 環境なら AAAA も4つを追加。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q2. “浸透待ち”って何？&lt;/strong&gt;
→ 誰かが配っているわけではなく、&lt;strong&gt;再帰DNSのキャッシュTTLが更新されていくのを待つ&lt;/strong&gt;こと。数分〜数時間、場合によっては24–48時間程度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q3. &lt;code&gt;www&lt;/code&gt; にも A/AAAA を入れていい？&lt;/strong&gt;
→ &lt;strong&gt;推奨しません。&lt;/strong&gt; &lt;code&gt;www&lt;/code&gt; は &lt;strong&gt;CNAME → &lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt; のみ。A/AAAA を併置すると整合性が崩れることがあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q4. Apex に CNAME を置けないのはなぜ？&lt;/strong&gt;
→ DNS 仕様上、ゾーンの頂点（Apex）に CNAME を置くと他レコードと両立できません。代替は &lt;strong&gt;A/AAAA&lt;/strong&gt; か、DNS 事業者の &lt;strong&gt;ALIAS/ANAME&lt;/strong&gt; です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q5. NS はどこで決まる？&lt;/strong&gt;
→ &lt;strong&gt;レジストラの管理画面&lt;/strong&gt;で設定し、&lt;strong&gt;レジストリ&lt;/strong&gt;（例：&lt;code&gt;.com&lt;/code&gt;＝Verisign）へ登録されます。親ゾーンの NS が「委任先＝あなたの権威DNS」を指します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q6. メール（MX/TXT/SPF/DMARC）は？&lt;/strong&gt;
→ 既に運用中なら &lt;strong&gt;NS 切り替え前に新DNSへ全レコードを複製&lt;/strong&gt;しておくこと（切替直後のメール不達を防止）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q7. CAA は必要？&lt;/strong&gt;
→ 任意ですが、Let’s Encrypt を明示するなら Apex に以下を1件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;CAA 0 issue &amp;#34;letsencrypt.org&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h1 id="5-役割の違いをもう一度誤解しがちなポイント"&gt;5. 役割の違いをもう一度（誤解しがちなポイント）
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;レジストラ（例：お名前.com/Route 53/Cloudflare）&lt;/strong&gt; … レジストリに &lt;strong&gt;NS（＋DS）&lt;/strong&gt; を登録する“窓口”。&lt;strong&gt;自社DNSを提供することも多いが必須ではない&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;レジストリ（例：&lt;code&gt;.com&lt;/code&gt;＝Verisign）&lt;/strong&gt; … 親ゾーンに &lt;strong&gt;NS（委任）&lt;/strong&gt; を掲載。&lt;strong&gt;A/AAAA/CNAME等は保持しない&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;権威DNS（例：dnsv.jp / Cloudflare DNS / Route 53 Hosted Zone）&lt;/strong&gt; … &lt;strong&gt;A/AAAA/CNAME/MX/TXT…の最終回答&lt;/strong&gt;を返すサーバー群。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;組み合わせは原則自由（例：レジストラ＝お名前.com、権威DNS＝Cloudflare）。現実的には「他社レジストラのドメインでもDNSだけ受ける」かどうかは&lt;strong&gt;各事業者の提供ポリシー&lt;/strong&gt;に依存します。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="6-仕上げチェックリストコピペ用"&gt;6. 仕上げチェックリスト（コピペ用）
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; GitHub → Pages → &lt;strong&gt;Custom domain&lt;/strong&gt; に &lt;code&gt;example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; &lt;strong&gt;Enforce HTTPS&lt;/strong&gt; ON&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; Apex に &lt;strong&gt;A ×4&lt;/strong&gt;（185.199.108.153〜111.153）&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; Apex に &lt;strong&gt;AAAA ×4&lt;/strong&gt;（&lt;code&gt;2606:50c0:8000::153&lt;/code&gt;〜&lt;code&gt;::8003&lt;/code&gt;）※対応時&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; &lt;code&gt;www&lt;/code&gt; に &lt;strong&gt;CNAME → &lt;code&gt;username.github.io&lt;/code&gt;&lt;/strong&gt;（A/AAAAは置かない）&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; （任意）CAA &lt;code&gt;letsencrypt.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled="" type="checkbox"&gt; &lt;code&gt;dig&lt;/code&gt; で &lt;strong&gt;NS / A / AAAA / CNAME&lt;/strong&gt; を確認&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;以上。この記事の手順をそのまま置換すれば、Hugo/静的サイトでも数分で独自ドメイン化できます。必要に応じて &lt;code&gt;example.com&lt;/code&gt; / &lt;code&gt;username.github.io&lt;/code&gt; をあなたの値に置き換えてください。&lt;/p&gt;</description></item><item><title>Conversational Analytics API パブリックプレビュー概要紹介</title><link>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</link><pubDate>Sat, 04 Oct 2025 00:00:00 +0000</pubDate><guid>https://firebird-techtalktech.com/post/conversational-analytics-api-%E3%83%91%E3%83%96%E3%83%AA%E3%83%83%E3%82%AF%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E6%A6%82%E8%A6%81%E7%B4%B9%E4%BB%8B/</guid><description>&lt;p&gt;Google Cloud Next ’25 で発表された &lt;strong&gt;Conversational Analytics API&lt;/strong&gt; が、2025年8月末から &lt;strong&gt;パブリックプレビュー&lt;/strong&gt; として提供開始されました。&lt;br&gt;
BigQuery や Looker / Looker Studio 向けに &lt;strong&gt;データエージェントを自動生成&lt;/strong&gt; し、自然言語での分析を可能にする強力な機能です。&lt;br&gt;
日本語での情報がまだ少ないため、この記事では概要を整理してご紹介します。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="conversational-analytics-apiとは"&gt;Conversational Analytics APIとは？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Google Cloudの自然言語クエリエンジンをAPIとして利用可能にするもの&lt;/strong&gt; です。&lt;br&gt;
LookerやBigQuery Data Canvasで使われている自然言語分析の仕組みを、API経由で自分のアプリケーションにも組み込めるようになります。&lt;/p&gt;
&lt;p&gt;イメージとしては：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;BigQuery&lt;/strong&gt; のテーブルに対して自然言語で質問&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Looker / Looker Studio&lt;/strong&gt; の可視化を自然言語で操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SQL生成・実行 → 可視化 → 回答生成&lt;/strong&gt; を自動処理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が可能になります。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="利用イメージ"&gt;利用イメージ
&lt;/h2&gt;&lt;p&gt;基本的な流れは次の通りです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;データエージェントの作成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conversationの作成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自然言語での分析実行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例として、BigQueryのデータに「空港の総数が多い上位5州の棒グラフを作成してください」と質問すると：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;エージェントが &lt;strong&gt;テーブル定義を取得&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;自動で &lt;strong&gt;SQLを生成・実行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;グラフを作成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最終的な回答を返却&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;と進みます。SQLを自分で書かなくても、自然言語で分析できるのは非常に魅力的です。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="adkとの使い分け"&gt;ADKとの使い分け
&lt;/h2&gt;&lt;p&gt;Google Cloudには &lt;strong&gt;ADK (Agent Development Kit)&lt;/strong&gt; もあり、こちらでもBigQueryやLookerに対するAIエージェントを作成できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conversational Analytics API&lt;/strong&gt;&lt;br&gt;
→ Googleが用意した自然言語分析エージェントをそのまま利用可能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ADK&lt;/strong&gt;&lt;br&gt;
→ 自分でプロンプト設計や制御ができる高カスタマイズ型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い分けとしては、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手軽に自然言語分析を始めたい → Conversational Analytics API&lt;/li&gt;
&lt;li&gt;より細かい制御や独自仕様を組み込みたい → ADK&lt;br&gt;
という形になりそうです。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なお、ADKの &lt;code&gt;ask_data_insights&lt;/code&gt; ツールは Conversational Analytics API をベースとしており、組み合わせて使うことも可能です。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="個人的に推しポイント"&gt;個人的に推しポイント
&lt;/h2&gt;&lt;p&gt;実際に試してみて「これは良い」と思った点を3つ挙げます。&lt;/p&gt;
&lt;h3 id="1-データ指定がシンプル"&gt;1. データ指定がシンプル
&lt;/h3&gt;&lt;p&gt;BigQueryテーブルを以下のように指定するだけでエージェントを作成可能です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;bigquery_table_reference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;geminidataanalytics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BigQueryTableReference&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;bigquery_table_reference&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;my_project_id&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;bigquery_table_reference&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataset_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;my_dataset_id&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;bigquery_table_reference&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;my_table_id&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;LookerやLooker Studioでも同様の設定が可能。
とりあえず対象テーブルを渡すだけで自然言語分析ができる手軽さが魅力です。&lt;/p&gt;
&lt;h3 id="2-ビジネス用語をsystem_instructionに渡せる"&gt;2. ビジネス用語をsystem_instructionに渡せる
&lt;/h3&gt;&lt;p&gt;自然言語での分析では、ユーザーの言葉とテーブル定義を正しく対応づけるのが重要です。
このAPIでは system_instruction にYAMLでビジネス用語やmeasureを定義でき、精度を向上させられる設計になっています。&lt;/p&gt;
&lt;h3 id="3-bigqueryクエリのスキャン量制限"&gt;3. BigQueryクエリのスキャン量制限
&lt;/h3&gt;&lt;p&gt;big_query_max_billed_bytes を設定することで、エージェントが実行するクエリのスキャン量を制御できます。
BigQueryのオンデマンド課金を使っている場合に「誤って巨大クエリを実行される」リスクを防げるのは非常に安心です。&lt;/p&gt;
&lt;h2 id="まとめ"&gt;まとめ
&lt;/h2&gt;&lt;p&gt;BigQueryやLookerのデータを 自然言語で分析可能というのはとても便利そうです。
データエージェントを簡単に構築できる
ADKとも組み合わせ可能
やはり、特に、SQLを書かずにBigQueryを操作できる点は多くのユーザーにとって魅力的だと思います。&lt;/p&gt;</description></item><item><title>BigQueryのクエリ性能を劇的に改善する4つの最新機能</title><link>https://firebird-techtalktech.com/post/bigquery%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E6%80%A7%E8%83%BD%E3%82%92%E5%8A%87%E7%9A%84%E3%81%AB%E6%94%B9%E5%96%84%E3%81%99%E3%82%8B4%E3%81%A4%E3%81%AE%E6%9C%80%E6%96%B0%E6%A9%9F%E8%83%BD/</link><pubDate>Thu, 18 Sep 2025 17:53:00 +0900</pubDate><guid>https://firebird-techtalktech.com/post/bigquery%E3%81%AE%E3%82%AF%E3%82%A8%E3%83%AA%E6%80%A7%E8%83%BD%E3%82%92%E5%8A%87%E7%9A%84%E3%81%AB%E6%94%B9%E5%96%84%E3%81%99%E3%82%8B4%E3%81%A4%E3%81%AE%E6%9C%80%E6%96%B0%E6%A9%9F%E8%83%BD/</guid><description>&lt;h2 id="はじめに"&gt;はじめに
&lt;/h2&gt;&lt;p&gt;BigQueryは日々進化を続けており、クエリ性能を向上させる新機能が続々と追加されています。本記事では、SQLを一切変更することなく、設定変更だけでクエリ性能を劇的に改善できる4つの最新機能について詳しく解説します。&lt;/p&gt;
&lt;p&gt;これらの機能を活用することで、クエリの実行時間を大幅に短縮し、より効率的なデータ分析環境を構築できます。&lt;/p&gt;
&lt;h2 id="1-advanced-runtime---次世代実行エンジン"&gt;1. Advanced Runtime - 次世代実行エンジン
&lt;/h2&gt;&lt;h3 id="概要"&gt;概要
&lt;/h3&gt;&lt;p&gt;Advanced Runtimeは、BigQueryの実行エンジンを根本的に改良した次世代のランタイムです。1つの設定を有効にするだけで、複数の最適化が自動的に適用されます。&lt;/p&gt;
&lt;h3 id="有効化方法"&gt;有効化方法
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="k"&gt;LOCATION&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_runtime&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;advanced&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例：東京リージョンの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;asia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;northeast1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query_runtime&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;advanced&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="主な最適化機能"&gt;主な最適化機能
&lt;/h3&gt;&lt;h4 id="1-高度なベクトル化処理"&gt;1. 高度なベクトル化処理
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;データ読み取りの高速化&lt;/strong&gt;: カラムナストレージの特性を最大限活用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集計処理の最適化&lt;/strong&gt;: GROUP BYやSUM、COUNTなどの集計関数の実行速度向上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JOIN処理の改善&lt;/strong&gt;: 大規模テーブル間のJOINパフォーマンスを大幅改善&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="2-short-query-optimization"&gt;2. Short Query Optimization
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小規模クエリの高速化&lt;/strong&gt;: データ量が少ないクエリを単一ステージで処理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;レイテンシの削減&lt;/strong&gt;: ステージ間のデータ転送オーバーヘッドを削減&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;インタラクティブな分析に最適&lt;/strong&gt;: ダッシュボードやBI ツールからのクエリに効果的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="注意点"&gt;注意点
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;現在はプレビュー段階&lt;/li&gt;
&lt;li&gt;将来的にはデフォルト設定になる予定&lt;/li&gt;
&lt;li&gt;追加コストは発生しない&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2-history-based-optimization---履歴ベースの自動最適化"&gt;2. History-based Optimization - 履歴ベースの自動最適化
&lt;/h2&gt;&lt;h3 id="概要-1"&gt;概要
&lt;/h3&gt;&lt;p&gt;過去30日間のクエリ実行履歴を分析し、その情報を基に自動的にクエリを最適化する機能です。機械学習の考え方を取り入れた、革新的な最適化手法です。&lt;/p&gt;
&lt;h3 id="有効化方法-1"&gt;有効化方法
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="k"&gt;LOCATION&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_query_optimizer_options&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;adaptive=on&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例：USマルチリージョンの場合&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PROJECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OPTIONS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_query_optimizer_options&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;adaptive=on&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="最適化の仕組み"&gt;最適化の仕組み
&lt;/h3&gt;&lt;h4 id="1-joinオーダーの自動調整"&gt;1. JOINオーダーの自動調整
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 過去の実行履歴から最適な結合順序を判断
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_name&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;customers&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customer_id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;JOIN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- BigQueryが自動的に最も効率的な結合順序を選択
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="2-並列度の動的調整"&gt;2. 並列度の動的調整
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;テーブルサイズの変化に応じて並列処理数を自動調整&lt;/li&gt;
&lt;li&gt;リソース使用量とパフォーマンスのバランスを最適化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="メリット"&gt;メリット
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQLの変更不要&lt;/li&gt;
&lt;li&gt;継続的な最適化（データ量の変化に自動対応）&lt;/li&gt;
&lt;li&gt;GA（一般提供）済みで安定稼働&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="3-optional-job-creation-mode---ジョブ作成オーバーヘッドの削減"&gt;3. Optional Job Creation Mode - ジョブ作成オーバーヘッドの削減
&lt;/h2&gt;&lt;h3 id="概要-2"&gt;概要
&lt;/h3&gt;&lt;p&gt;小規模クエリの実行時に、ジョブ作成のオーバーヘッドをスキップすることで、クエリレイテンシを大幅に削減する機能です。&lt;/p&gt;
&lt;h3 id="実装方法"&gt;実装方法
&lt;/h3&gt;&lt;h4 id="python-クライアントでの設定"&gt;Python クライアントでの設定
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.cloud&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bigquery&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.cloud.bigquery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JobCreationMode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Optional Modeを有効化したクライアントの作成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;optional_mode_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bigquery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;default_job_creation_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;JobCreationMode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JOB_CREATION_OPTIONAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# クエリの実行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;SELECT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt; product_name,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt; SUM(sales_amount) as total_sales
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;FROM sales_data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;WHERE date = CURRENT_DATE()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;GROUP BY product_name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;LIMIT 10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# ジョブ作成オーバーヘッドなしで実行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optional_mode_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_sales&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="効果的な使用シーン"&gt;効果的な使用シーン
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;リアルタイムダッシュボード&lt;/strong&gt;: 頻繁に更新される軽量クエリ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API統合&lt;/strong&gt;: 低レイテンシが要求されるAPIバックエンド&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;インタラクティブ分析&lt;/strong&gt;: Jupyter NotebookやColabでの探索的分析&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="制限事項"&gt;制限事項
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ジョブAPIの使用不可（ジョブIDの取得、キャンセルなど）&lt;/li&gt;
&lt;li&gt;一時的な結果の保存なし&lt;/li&gt;
&lt;li&gt;複雑なクエリではシステムが自動的にジョブを作成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="4-cmeta-metadata-indexing---メタデータインデックス"&gt;4. CMETA (Metadata Indexing) - メタデータインデックス
&lt;/h2&gt;&lt;h3 id="概要-3"&gt;概要
&lt;/h3&gt;&lt;p&gt;カラムレベルおよびブロックレベルでメタデータをインデックス化し、ストレージ参照を劇的に高速化する機能です。&lt;/p&gt;
&lt;h3 id="自動有効化される条件"&gt;自動有効化される条件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;BigQueryネイティブストレージ：自動的に有効&lt;/li&gt;
&lt;li&gt;外部テーブル（Hive形式など）：手動設定により有効化可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="最適化の仕組み-1"&gt;最適化の仕組み
&lt;/h3&gt;&lt;h4 id="1-カラムレベルの統計情報"&gt;1. カラムレベルの統計情報
&lt;/h4&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- WHERE句の条件に基づいて、不要なデータブロックをスキップ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;large_table&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;created_date&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2025-01-01&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ACTIVE&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- CMETAが自動的に関連するデータブロックのみを読み取り
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id="2-ブロックレベルの最適化"&gt;2. ブロックレベルの最適化
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;各データブロックの最小値/最大値を記録&lt;/li&gt;
&lt;li&gt;NULL値の分布情報を保持&lt;/li&gt;
&lt;li&gt;カーディナリティ（一意値の数）を追跡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="パフォーマンス向上の例"&gt;パフォーマンス向上の例
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 従来：全データをスキャン
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- CMETA使用後：条件に一致するブロックのみをスキャン
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;billion_row_table&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;specific_user_123&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- 実行時間が数十倍高速化することも
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="実装ベストプラクティス"&gt;実装ベストプラクティス
&lt;/h2&gt;&lt;h3 id="1-段階的な有効化"&gt;1. 段階的な有効化
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 1. 開発環境で検証&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;gcloud config &lt;span class="nb"&gt;set&lt;/span&gt; project dev-project
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# Advanced Runtimeを有効化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;bq query --use_legacy_sql&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;ALTER PROJECT dev-project SET OPTIONS (\`region-asia-northeast1.query_runtime\` = &amp;#39;advanced&amp;#39;);&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 2. パフォーマンステスト実施&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 3. 本番環境への適用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="2-効果測定の方法"&gt;2. 効果測定の方法
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- クエリ実行時間の比較
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 機能有効化前後で同じクエリを実行し、実行時間を記録
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- INFORMATION_SCHEMAを使用した分析
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_slot_ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;total_bytes_processed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creation_time&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;asia&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;northeast1&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFORMATION_SCHEMA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JOBS_BY_PROJECT&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creation_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TIMESTAMP_SUB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;INTERVAL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;BY&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creation_time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="3-組み合わせ効果"&gt;3. 組み合わせ効果
&lt;/h3&gt;&lt;p&gt;すべての機能を組み合わせることで、相乗効果が期待できます：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# すべての最適化を有効化した環境設定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.cloud&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;bigquery&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# プロジェクトレベルの設定（事前に実施）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 1. Advanced Runtime有効化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 2. History-based Optimization有効化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 3. CMETAは自動有効&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# アプリケーションレベルの設定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bigquery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;default_job_creation_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bigquery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JobCreationMode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JOB_CREATION_OPTIONAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# 最適化されたクエリ実行環境の完成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="効果の実例"&gt;効果の実例
&lt;/h2&gt;&lt;h3 id="ケース1日次集計バッチ処理"&gt;ケース1：日次集計バッチ処理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;従来&lt;/strong&gt;: 45分&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最適化後&lt;/strong&gt;: 12分（73%削減）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用機能&lt;/strong&gt;: Advanced Runtime + History-based Optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ケース2リアルタイムダッシュボード"&gt;ケース2：リアルタイムダッシュボード
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;従来&lt;/strong&gt;: 2.5秒/クエリ&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最適化後&lt;/strong&gt;: 0.3秒/クエリ（88%削減）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用機能&lt;/strong&gt;: Optional Job Creation Mode + CMETA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ケース3大規模join処理"&gt;ケース3：大規模JOIN処理
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;従来&lt;/strong&gt;: 120分&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最適化後&lt;/strong&gt;: 35分（71%削減）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用機能&lt;/strong&gt;: すべての機能を組み合わせ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="トラブルシューティング"&gt;トラブルシューティング
&lt;/h2&gt;&lt;h3 id="q1-設定変更後も性能が改善しない"&gt;Q1: 設定変更後も性能が改善しない
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- 設定が正しく適用されているか確認
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;${&lt;/span&gt;&lt;span class="k"&gt;LOCATION&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFORMATION_SCHEMA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROJECT_OPTIONS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;option_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%query_runtime%&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;OR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;option_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;LIKE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%optimizer%&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="q2-optional-job-creation-modeでエラーが発生"&gt;Q2: Optional Job Creation Modeでエラーが発生
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# フォールバック処理の実装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;optional_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;Optional mode failed, falling back to normal mode: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;normal_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="q3-特定のクエリで性能が低下"&gt;Q3: 特定のクエリで性能が低下
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- クエリヒントを使用して最適化を無効化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;standardSQL&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;disable_optimizations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your_table&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="まとめ"&gt;まとめ
&lt;/h2&gt;&lt;p&gt;BigQueryの最新性能改善機能を活用することで：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;即効性&lt;/strong&gt;: SQLを変更せずに性能向上を実現&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コスト効率&lt;/strong&gt;: 処理時間短縮によるスロット使用量の削減&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;継続的改善&lt;/strong&gt;: 履歴ベース最適化による自動チューニング&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将来性&lt;/strong&gt;: これらの機能は今後デフォルト化される予定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これらの機能は無料で利用でき、設定も簡単です。まずは開発環境で試してみて、効果を実感してください。BigQueryの進化は止まることなく、今後もさらなる性能改善が期待できます。&lt;/p&gt;
&lt;h2 id="参考リンク"&gt;参考リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://cloud.google.com/bigquery/docs" target="_blank" rel="noopener"
&gt;BigQuery公式ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://cloud.google.com/bigquery/docs/release-notes" target="_blank" rel="noopener"
&gt;BigQuery リリースノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://cloud.google.com/blog/products/data-analytics" target="_blank" rel="noopener"
&gt;Google Cloud Blog - BigQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item></channel></rss>