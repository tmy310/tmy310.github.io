<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tech on firebirdテクテクテクブログ</title>
        <link>https://firebird-techtalktech.com/categories/tech/</link>
        <description>Recent content in Tech on firebirdテクテクテクブログ</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <copyright>トミー</copyright>
        <lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://firebird-techtalktech.com/categories/tech/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Escape from Protocol Buffer Hell: My 3-Week Battle Crying &#39;It&#39;s Not Encryption!&#39;</title>
        <link>https://firebird-techtalktech.com/post/escape-from-protocol-buffer-hell-my-3-week-battle-crying-its-not-encryption/</link>
        <pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://firebird-techtalktech.com/post/escape-from-protocol-buffer-hell-my-3-week-battle-crying-its-not-encryption/</guid>
        <description>&lt;h1 id=&#34;escape-from-protocol-buffer-hell-my-3-week-battle-crying-its-not-encryption&#34;&gt;Escape from Protocol Buffer Hell: My 3-Week Battle Crying &amp;lsquo;It&amp;rsquo;s Not Encryption!&amp;rsquo;
&lt;/h1&gt;&lt;h2 id=&#34;wait-isnt-this-encryption---the-initial-misconception&#34;&gt;&amp;ldquo;Wait, isn&amp;rsquo;t this encryption?&amp;rdquo; - The Initial Misconception
&lt;/h2&gt;&lt;p&gt;When a new microservices project started and the team leader said &amp;ldquo;Let&amp;rsquo;s use Protocol Buffer with gRPC,&amp;rdquo; I internally panicked thinking &amp;ldquo;Oh no, I don&amp;rsquo;t understand encryption technology&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My first major misconception: &amp;ldquo;Protocol Buffer = Encryption technology&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I actually saw Protocol Buffer binary data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0A 05 41 6C 69 63 65 10 1A
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;ldquo;Wow, it&amp;rsquo;s completely encrypted! Can I decode this?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This is the record of my 3-week investigation, failures, and discoveries.&lt;/p&gt;
&lt;h2 id=&#34;week-1-the-why-did-json-become-9-bytes-incident&#34;&gt;Week 1: The &amp;ldquo;Why did JSON become 9 bytes!?&amp;rdquo; Incident
&lt;/h2&gt;&lt;h3 id=&#34;failure-experience-the-initial-shock&#34;&gt;Failure Experience: The Initial Shock
&lt;/h3&gt;&lt;p&gt;Day 2 of the project. A senior said &amp;ldquo;Protocol Buffer is 3 times more efficient than JSON,&amp;rdquo; so I tried it out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Original data (JSON)&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Size&lt;/strong&gt;: 26 bytes&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Protocol Buffer binary&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0A 05 41 6C 69 63 65 10 1A
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Size&lt;/strong&gt;: 9 bytes&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Really? Actually one-third? But what language is this? Alien characters?&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;investigation-begins-solving-the-binary-mystery&#34;&gt;Investigation Begins: Solving the Binary Mystery
&lt;/h3&gt;&lt;p&gt;I went into complete panic mode and started investigating until late at night.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First failure&lt;/strong&gt;: Googled &amp;ldquo;Protocol Buffer encryption&amp;rdquo;
→ Nothing found, because it&amp;rsquo;s not encryption in the first place&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next failure&lt;/strong&gt;: Opened with binary editor and stared at it
→ &amp;ldquo;What are 41 6C 69 63 65? ASCII? But what are 0A 05?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finally discovered&lt;/strong&gt;: Looked up ASCII code table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;41&lt;/code&gt; = 65 = &amp;lsquo;A&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6C&lt;/code&gt; = 108 = &amp;rsquo;l&#39;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;69&lt;/code&gt; = 105 = &amp;lsquo;i&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;63&lt;/code&gt; = 99 = &amp;lsquo;c&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;65&lt;/code&gt; = 101 = &amp;rsquo;e&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Ah! It&amp;rsquo;s &amp;quot;Alice&amp;quot;! It&amp;rsquo;s not encryption, just encoding!&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;week-2-the-shocking-discovery-of-the-field-number-system&#34;&gt;Week 2: The Shocking Discovery of the &amp;ldquo;Field Number System&amp;rdquo;
&lt;/h2&gt;&lt;h3 id=&#34;failure-experience-the-mystery-of-proto-files&#34;&gt;Failure Experience: The Mystery of .proto Files
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;// What&amp;#39;s this &amp;#34;= 1&amp;#34;?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// &amp;#34;= 2&amp;#34; too? Default value?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// &amp;#34;= 3&amp;#34; too?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;ldquo;Huh? Is the default for id 1, and name 2? This makes no sense&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;discovery-of-truth-shocking-facts&#34;&gt;Discovery of Truth: Shocking Facts
&lt;/h3&gt;&lt;p&gt;After 3 days of puzzling, I read the official documentation and was stunned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shocking facts&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Field names are not transmitted!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Only field numbers are transmitted!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;= 2&lt;/code&gt; is not a default value but an identification number!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0A 05 41 6C 69 63 65 10 1A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;↓
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0A 05: Field 2 (name), length 5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;41 6C 69 63 65: &amp;#34;Alice&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;10 1A: Field 3 (age) = 26
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;ldquo;That&amp;rsquo;s why it&amp;rsquo;s small! It doesn&amp;rsquo;t send field names! Genius!&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;verification-experiment-really-3x-more-efficient&#34;&gt;Verification Experiment: Really 3x More Efficient?
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;JSON vs Protocol Buffer Showdown&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Data&lt;/th&gt;
          &lt;th&gt;JSON&lt;/th&gt;
          &lt;th&gt;Protocol Buffer&lt;/th&gt;
          &lt;th&gt;Efficiency&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Simple data&lt;/td&gt;
          &lt;td&gt;26 bytes&lt;/td&gt;
          &lt;td&gt;9 bytes&lt;/td&gt;
          &lt;td&gt;2.9x&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;100 user array&lt;/td&gt;
          &lt;td&gt;2,600 bytes&lt;/td&gt;
          &lt;td&gt;900 bytes&lt;/td&gt;
          &lt;td&gt;2.9x&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Complex object&lt;/td&gt;
          &lt;td&gt;1,200 bytes&lt;/td&gt;
          &lt;td&gt;420 bytes&lt;/td&gt;
          &lt;td&gt;2.9x&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;ldquo;It&amp;rsquo;s true&amp;hellip; about 3x more efficient for any data!&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;week-3-grpc-vs-trpc-which-one-selection-hell&#34;&gt;Week 3: &amp;ldquo;gRPC vs tRPC, which one?&amp;rdquo; Selection Hell
&lt;/h2&gt;&lt;h3 id=&#34;failure-experience-lost-in-the-rpc-technology-selection-maze&#34;&gt;Failure Experience: Lost in the RPC Technology Selection Maze
&lt;/h3&gt;&lt;p&gt;As the project reached its climax, the &amp;ldquo;So, do we use gRPC or tRPC?&amp;rdquo; problem erupted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initial shallow understanding&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gRPC = Old technology?&lt;/li&gt;
&lt;li&gt;tRPC = New technology so it&amp;rsquo;s good?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;After trying both&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;grpc-implementation-experience-why-isnt-it-type-safe&#34;&gt;gRPC Implementation Experience: &amp;ldquo;Why isn&amp;rsquo;t it type-safe?&amp;rdquo;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// gRPC client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;UserServiceClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GetUserRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// response.getName() ← This isn&amp;#39;t type-checked!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;ldquo;Huh? It&amp;rsquo;s TypeScript but not type-safe? What&amp;rsquo;s the point of gRPC?&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;trpc-implementation-experience-this-is-too-comfortable&#34;&gt;tRPC Implementation Experience: &amp;ldquo;This is too comfortable&amp;hellip;&amp;rdquo;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// tRPC client
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;trpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getUser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ↑ Completely type-safe! IDE completion works too!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;ldquo;This is amazing&amp;hellip; the development experience is like night and day!&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;reality-check-but-what-about-inter-microservice-communication&#34;&gt;Reality Check: &amp;ldquo;But what about inter-microservice communication?&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;I noticed the tRPC trap after implementation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tRPC limitations discovered&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript only (no integration with other languages)&lt;/li&gt;
&lt;li&gt;Server-to-server communication uses JSON = Large data transfer&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t benefit from Protocol Buffer advantages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;Ah, we&amp;rsquo;re using Go and Python for microservices too&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;final-battle-the-truth-of-technology-selection&#34;&gt;Final Battle: The Truth of Technology Selection
&lt;/h2&gt;&lt;h3 id=&#34;blood-and-sweat-comparison-chart&#34;&gt;Blood and Sweat Comparison Chart
&lt;/h3&gt;&lt;p&gt;My blood and sweat crystallized after 3 weeks of investigation:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Technology&lt;/th&gt;
          &lt;th&gt;Data Format&lt;/th&gt;
          &lt;th&gt;Transfer Efficiency&lt;/th&gt;
          &lt;th&gt;Dev Experience&lt;/th&gt;
          &lt;th&gt;Multi-language&lt;/th&gt;
          &lt;th&gt;Learning Cost&lt;/th&gt;
          &lt;th&gt;Use Case&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Protocol Buffer&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐&lt;/td&gt;
          &lt;td&gt;Inter-microservice&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;tRPC&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;JSON&lt;/td&gt;
          &lt;td&gt;⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;Frontend↔Backend (TS unified environment)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;REST&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;JSON&lt;/td&gt;
          &lt;td&gt;⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;⭐⭐⭐⭐⭐&lt;/td&gt;
          &lt;td&gt;General Web API&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;final-decision-the-importance-of-right-tool-for-right-job&#34;&gt;Final Decision: The Importance of &amp;ldquo;Right Tool for Right Job&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Final project selection&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inter-microservice communication&lt;/strong&gt;: gRPC + Protocol Buffer
&lt;ul&gt;
&lt;li&gt;Reason: Prioritized transfer efficiency and performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frontend↔API&lt;/strong&gt;: tRPC
&lt;ul&gt;
&lt;li&gt;Reason: Prioritized development experience and type safety&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ldquo;In the end, there&amp;rsquo;s no silver bullet&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;what-i-learned-lessons-from-3-weeks-of-struggle&#34;&gt;What I Learned: Lessons from 3 Weeks of Struggle
&lt;/h2&gt;&lt;h3 id=&#34;lesson-1-encryption-vs-encoding&#34;&gt;Lesson 1: &amp;ldquo;Encryption&amp;rdquo; vs &amp;ldquo;Encoding&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Biggest misconception&lt;/strong&gt;: I thought Protocol Buffer was encryption technology
&lt;strong&gt;Truth&lt;/strong&gt;: Just efficient binary encoding technology&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understanding the difference&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt;: Security purpose, requires decryption key&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encoding&lt;/strong&gt;: Efficiency purpose, decodable if you know the rules&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lesson-2-the-trap-of-new--better&#34;&gt;Lesson 2: The Trap of &amp;ldquo;New = Better&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Initial thinking&lt;/strong&gt;: tRPC is new so it must be better
&lt;strong&gt;Reality&lt;/strong&gt;: Sometimes old gRPC is more suitable depending on use case&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Truth of technology selection&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clarify requirements&lt;/li&gt;
&lt;li&gt;Understand trade-offs&lt;/li&gt;
&lt;li&gt;Select appropriate tools for specific purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lesson-3-the-power-of-binary-encoding&#34;&gt;Lesson 3: The Power of Binary Encoding
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;True value of Protocol Buffer&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not sending field names = Data size reduction&lt;/li&gt;
&lt;li&gt;Managing type information with schema = Type safety&lt;/li&gt;
&lt;li&gt;Multi-language support = Ecosystem breadth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Actual measurement data&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Regular REST API: 2.6KB per request
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Same data with gRPC: 0.9KB per request
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;For 1 million requests per month:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- REST: 2.6GB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- gRPC: 0.9GB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- Reduction effect: 1.7GB (65% reduction)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;summary-the-obvious-conclusion-that-protocol-buffer-isnt-encryption&#34;&gt;Summary: The Obvious Conclusion That &amp;ldquo;Protocol Buffer Isn&amp;rsquo;t Encryption&amp;rdquo;
&lt;/h2&gt;&lt;p&gt;What I learned through 3 weeks of struggle:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Protocol Buffer is not encryption technology&lt;/strong&gt; (should have been obvious&amp;hellip;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binary encoding is truly efficient&lt;/strong&gt; (proven by actual measurement)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RPC technologies are about right tool for right job&lt;/strong&gt; (no silver bullet)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Getting your hands dirty is better than reading technical articles for understanding&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Starting from the misconception &amp;ldquo;Protocol Buffer is encryption, right?&amp;rdquo;, the investigation resulted in understanding the full picture of modern RPC technologies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For the next similar technical investigation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read official documentation first&lt;/li&gt;
&lt;li&gt;Actually write code and try it out&lt;/li&gt;
&lt;li&gt;Question your assumptions&lt;/li&gt;
&lt;li&gt;Compare multiple technologies to understand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When asked &amp;ldquo;Is Protocol Buffer encryption?&amp;rdquo; I can now confidently answer &amp;ldquo;No! It&amp;rsquo;s efficient binary encoding!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Everyone, when you encounter new technologies, don&amp;rsquo;t be afraid to get your hands dirty and investigate. You&amp;rsquo;ll surely discover more than you expect.&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
