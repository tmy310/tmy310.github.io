<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on firebirdテクテクテクブログ</title><link>https://firebird-techtalktech.com/categories/tech/</link><description>Recent content in Tech on firebirdテクテクテクブログ</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>トミー</copyright><lastBuildDate>Sun, 14 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://firebird-techtalktech.com/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Escape from Protocol Buffer Hell: My 3-Week Battle Crying 'It's Not Encryption!'</title><link>https://firebird-techtalktech.com/post/escape-from-protocol-buffer-hell-my-3-week-battle-crying-its-not-encryption/</link><pubDate>Sun, 14 Sep 2025 00:00:00 +0000</pubDate><guid>https://firebird-techtalktech.com/post/escape-from-protocol-buffer-hell-my-3-week-battle-crying-its-not-encryption/</guid><description>&lt;h1 id="escape-from-protocol-buffer-hell-my-3-week-battle-crying-its-not-encryption">Escape from Protocol Buffer Hell: My 3-Week Battle Crying &amp;lsquo;It&amp;rsquo;s Not Encryption!&amp;rsquo;
&lt;/h1>&lt;h2 id="wait-isnt-this-encryption---the-initial-misconception">&amp;ldquo;Wait, isn&amp;rsquo;t this encryption?&amp;rdquo; - The Initial Misconception
&lt;/h2>&lt;p>When a new microservices project started and the team leader said &amp;ldquo;Let&amp;rsquo;s use Protocol Buffer with gRPC,&amp;rdquo; I internally panicked thinking &amp;ldquo;Oh no, I don&amp;rsquo;t understand encryption technology&amp;hellip;&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>My first major misconception: &amp;ldquo;Protocol Buffer = Encryption technology&amp;rdquo;&lt;/strong>&lt;/p>
&lt;p>When I actually saw Protocol Buffer binary data:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0A 05 41 6C 69 63 65 10 1A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;Wow, it&amp;rsquo;s completely encrypted! Can I decode this?&amp;rdquo;&lt;/p>
&lt;p>This is the record of my 3-week investigation, failures, and discoveries.&lt;/p>
&lt;h2 id="week-1-the-why-did-json-become-9-bytes-incident">Week 1: The &amp;ldquo;Why did JSON become 9 bytes!?&amp;rdquo; Incident
&lt;/h2>&lt;h3 id="failure-experience-the-initial-shock">Failure Experience: The Initial Shock
&lt;/h3>&lt;p>Day 2 of the project. A senior said &amp;ldquo;Protocol Buffer is 3 times more efficient than JSON,&amp;rdquo; so I tried it out.&lt;/p>
&lt;p>&lt;strong>Original data (JSON)&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">26&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Size&lt;/strong>: 26 bytes&lt;/p>
&lt;p>&lt;strong>Protocol Buffer binary&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0A 05 41 6C 69 63 65 10 1A
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Size&lt;/strong>: 9 bytes&lt;/p>
&lt;p>&amp;ldquo;Really? Actually one-third? But what language is this? Alien characters?&amp;rdquo;&lt;/p>
&lt;h3 id="investigation-begins-solving-the-binary-mystery">Investigation Begins: Solving the Binary Mystery
&lt;/h3>&lt;p>I went into complete panic mode and started investigating until late at night.&lt;/p>
&lt;p>&lt;strong>First failure&lt;/strong>: Googled &amp;ldquo;Protocol Buffer encryption&amp;rdquo;
→ Nothing found, because it&amp;rsquo;s not encryption in the first place&lt;/p>
&lt;p>&lt;strong>Next failure&lt;/strong>: Opened with binary editor and stared at it
→ &amp;ldquo;What are 41 6C 69 63 65? ASCII? But what are 0A 05?&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>Finally discovered&lt;/strong>: Looked up ASCII code table&lt;/p>
&lt;ul>
&lt;li>&lt;code>41&lt;/code> = 65 = &amp;lsquo;A&amp;rsquo;&lt;/li>
&lt;li>&lt;code>6C&lt;/code> = 108 = &amp;rsquo;l'&lt;/li>
&lt;li>&lt;code>69&lt;/code> = 105 = &amp;lsquo;i&amp;rsquo;&lt;/li>
&lt;li>&lt;code>63&lt;/code> = 99 = &amp;lsquo;c&amp;rsquo;&lt;/li>
&lt;li>&lt;code>65&lt;/code> = 101 = &amp;rsquo;e'&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Ah! It&amp;rsquo;s &amp;quot;Alice&amp;quot;! It&amp;rsquo;s not encryption, just encoding!&amp;rdquo;&lt;/p>
&lt;h2 id="week-2-the-shocking-discovery-of-the-field-number-system">Week 2: The Shocking Discovery of the &amp;ldquo;Field Number System&amp;rdquo;
&lt;/h2>&lt;h3 id="failure-experience-the-mystery-of-proto-files">Failure Experience: The Mystery of .proto Files
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-protobuf" data-lang="protobuf">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">message&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// What&amp;#39;s this &amp;#34;= 1&amp;#34;?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// &amp;#34;= 2&amp;#34; too? Default value?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int32&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// &amp;#34;= 3&amp;#34; too?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;Huh? Is the default for id 1, and name 2? This makes no sense&amp;hellip;&amp;rdquo;&lt;/p>
&lt;h3 id="discovery-of-truth-shocking-facts">Discovery of Truth: Shocking Facts
&lt;/h3>&lt;p>After 3 days of puzzling, I read the official documentation and was stunned.&lt;/p>
&lt;p>&lt;strong>Shocking facts&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Field names are not transmitted!&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Only field numbers are transmitted!&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>= 2&lt;/code> is not a default value but an identification number!&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">0A 05 41 6C 69 63 65 10 1A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0A 05: Field 2 (name), length 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">41 6C 69 63 65: &amp;#34;Alice&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10 1A: Field 3 (age) = 26
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;That&amp;rsquo;s why it&amp;rsquo;s small! It doesn&amp;rsquo;t send field names! Genius!&amp;rdquo;&lt;/p>
&lt;h3 id="verification-experiment-really-3x-more-efficient">Verification Experiment: Really 3x More Efficient?
&lt;/h3>&lt;p>&lt;strong>JSON vs Protocol Buffer Showdown&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Data&lt;/th>
&lt;th>JSON&lt;/th>
&lt;th>Protocol Buffer&lt;/th>
&lt;th>Efficiency&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Simple data&lt;/td>
&lt;td>26 bytes&lt;/td>
&lt;td>9 bytes&lt;/td>
&lt;td>2.9x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>100 user array&lt;/td>
&lt;td>2,600 bytes&lt;/td>
&lt;td>900 bytes&lt;/td>
&lt;td>2.9x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Complex object&lt;/td>
&lt;td>1,200 bytes&lt;/td>
&lt;td>420 bytes&lt;/td>
&lt;td>2.9x&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&amp;ldquo;It&amp;rsquo;s true&amp;hellip; about 3x more efficient for any data!&amp;rdquo;&lt;/p>
&lt;h2 id="week-3-grpc-vs-trpc-which-one-selection-hell">Week 3: &amp;ldquo;gRPC vs tRPC, which one?&amp;rdquo; Selection Hell
&lt;/h2>&lt;h3 id="failure-experience-lost-in-the-rpc-technology-selection-maze">Failure Experience: Lost in the RPC Technology Selection Maze
&lt;/h3>&lt;p>As the project reached its climax, the &amp;ldquo;So, do we use gRPC or tRPC?&amp;rdquo; problem erupted.&lt;/p>
&lt;p>&lt;strong>Initial shallow understanding&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>gRPC = Old technology?&lt;/li>
&lt;li>tRPC = New technology so it&amp;rsquo;s good?&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>After trying both&amp;hellip;&lt;/strong>&lt;/p>
&lt;h3 id="grpc-implementation-experience-why-isnt-it-type-safe">gRPC Implementation Experience: &amp;ldquo;Why isn&amp;rsquo;t it type-safe?&amp;rdquo;
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// gRPC client
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">UserServiceClient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;localhost:50051&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">request&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">GetUserRequest&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">client&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// response.getName() ← This isn&amp;#39;t type-checked!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;Huh? It&amp;rsquo;s TypeScript but not type-safe? What&amp;rsquo;s the point of gRPC?&amp;rdquo;&lt;/p>
&lt;h3 id="trpc-implementation-experience-this-is-too-comfortable">tRPC Implementation Experience: &amp;ldquo;This is too comfortable&amp;hellip;&amp;rdquo;
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// tRPC client
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">trpc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">query&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">123&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ↑ Completely type-safe! IDE completion works too!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;This is amazing&amp;hellip; the development experience is like night and day!&amp;rdquo;&lt;/p>
&lt;h3 id="reality-check-but-what-about-inter-microservice-communication">Reality Check: &amp;ldquo;But what about inter-microservice communication?&amp;rdquo;
&lt;/h3>&lt;p>I noticed the tRPC trap after implementation.&lt;/p>
&lt;p>&lt;strong>tRPC limitations discovered&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>TypeScript only (no integration with other languages)&lt;/li>
&lt;li>Server-to-server communication uses JSON = Large data transfer&lt;/li>
&lt;li>Can&amp;rsquo;t benefit from Protocol Buffer advantages&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;Ah, we&amp;rsquo;re using Go and Python for microservices too&amp;hellip;&amp;rdquo;&lt;/p>
&lt;h2 id="final-battle-the-truth-of-technology-selection">Final Battle: The Truth of Technology Selection
&lt;/h2>&lt;h3 id="blood-and-sweat-comparison-chart">Blood and Sweat Comparison Chart
&lt;/h3>&lt;p>My blood and sweat crystallized after 3 weeks of investigation:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Technology&lt;/th>
&lt;th>Data Format&lt;/th>
&lt;th>Transfer Efficiency&lt;/th>
&lt;th>Dev Experience&lt;/th>
&lt;th>Multi-language&lt;/th>
&lt;th>Learning Cost&lt;/th>
&lt;th>Use Case&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>gRPC&lt;/strong>&lt;/td>
&lt;td>Protocol Buffer&lt;/td>
&lt;td>⭐⭐⭐⭐⭐&lt;/td>
&lt;td>⭐⭐&lt;/td>
&lt;td>⭐⭐⭐⭐⭐&lt;/td>
&lt;td>⭐⭐&lt;/td>
&lt;td>Inter-microservice&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>tRPC&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>⭐⭐&lt;/td>
&lt;td>⭐⭐⭐⭐⭐&lt;/td>
&lt;td>⭐&lt;/td>
&lt;td>⭐⭐⭐⭐&lt;/td>
&lt;td>Frontend↔Backend (TS unified environment)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>REST&lt;/strong>&lt;/td>
&lt;td>JSON&lt;/td>
&lt;td>⭐⭐&lt;/td>
&lt;td>⭐⭐⭐&lt;/td>
&lt;td>⭐⭐⭐⭐⭐&lt;/td>
&lt;td>⭐⭐⭐⭐⭐&lt;/td>
&lt;td>General Web API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="final-decision-the-importance-of-right-tool-for-right-job">Final Decision: The Importance of &amp;ldquo;Right Tool for Right Job&amp;rdquo;
&lt;/h3>&lt;p>&lt;strong>Final project selection&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Inter-microservice communication&lt;/strong>: gRPC + Protocol Buffer
&lt;ul>
&lt;li>Reason: Prioritized transfer efficiency and performance&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Frontend↔API&lt;/strong>: tRPC
&lt;ul>
&lt;li>Reason: Prioritized development experience and type safety&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&amp;ldquo;In the end, there&amp;rsquo;s no silver bullet&amp;hellip;&amp;rdquo;&lt;/p>
&lt;h2 id="what-i-learned-lessons-from-3-weeks-of-struggle">What I Learned: Lessons from 3 Weeks of Struggle
&lt;/h2>&lt;h3 id="lesson-1-encryption-vs-encoding">Lesson 1: &amp;ldquo;Encryption&amp;rdquo; vs &amp;ldquo;Encoding&amp;rdquo;
&lt;/h3>&lt;p>&lt;strong>Biggest misconception&lt;/strong>: I thought Protocol Buffer was encryption technology
&lt;strong>Truth&lt;/strong>: Just efficient binary encoding technology&lt;/p>
&lt;p>&lt;strong>Understanding the difference&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Encryption&lt;/strong>: Security purpose, requires decryption key&lt;/li>
&lt;li>&lt;strong>Encoding&lt;/strong>: Efficiency purpose, decodable if you know the rules&lt;/li>
&lt;/ul>
&lt;h3 id="lesson-2-the-trap-of-new--better">Lesson 2: The Trap of &amp;ldquo;New = Better&amp;rdquo;
&lt;/h3>&lt;p>&lt;strong>Initial thinking&lt;/strong>: tRPC is new so it must be better
&lt;strong>Reality&lt;/strong>: Sometimes old gRPC is more suitable depending on use case&lt;/p>
&lt;p>&lt;strong>Truth of technology selection&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Clarify requirements&lt;/li>
&lt;li>Understand trade-offs&lt;/li>
&lt;li>Select appropriate tools for specific purposes&lt;/li>
&lt;/ul>
&lt;h3 id="lesson-3-the-power-of-binary-encoding">Lesson 3: The Power of Binary Encoding
&lt;/h3>&lt;p>&lt;strong>True value of Protocol Buffer&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Not sending field names = Data size reduction&lt;/li>
&lt;li>Managing type information with schema = Type safety&lt;/li>
&lt;li>Multi-language support = Ecosystem breadth&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Actual measurement data&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Regular REST API: 2.6KB per request
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Same data with gRPC: 0.9KB per request
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">For 1 million requests per month:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- REST: 2.6GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- gRPC: 0.9GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- Reduction effect: 1.7GB (65% reduction)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="summary-the-obvious-conclusion-that-protocol-buffer-isnt-encryption">Summary: The Obvious Conclusion That &amp;ldquo;Protocol Buffer Isn&amp;rsquo;t Encryption&amp;rdquo;
&lt;/h2>&lt;p>What I learned through 3 weeks of struggle:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Protocol Buffer is not encryption technology&lt;/strong> (should have been obvious&amp;hellip;)&lt;/li>
&lt;li>&lt;strong>Binary encoding is truly efficient&lt;/strong> (proven by actual measurement)&lt;/li>
&lt;li>&lt;strong>RPC technologies are about right tool for right job&lt;/strong> (no silver bullet)&lt;/li>
&lt;li>&lt;strong>Getting your hands dirty is better than reading technical articles for understanding&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Starting from the misconception &amp;ldquo;Protocol Buffer is encryption, right?&amp;rdquo;, the investigation resulted in understanding the full picture of modern RPC technologies.&lt;/p>
&lt;p>&lt;strong>For the next similar technical investigation&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Read official documentation first&lt;/li>
&lt;li>Actually write code and try it out&lt;/li>
&lt;li>Question your assumptions&lt;/li>
&lt;li>Compare multiple technologies to understand&lt;/li>
&lt;/ul>
&lt;p>When asked &amp;ldquo;Is Protocol Buffer encryption?&amp;rdquo; I can now confidently answer &amp;ldquo;No! It&amp;rsquo;s efficient binary encoding!&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>Everyone, when you encounter new technologies, don&amp;rsquo;t be afraid to get your hands dirty and investigate. You&amp;rsquo;ll surely discover more than you expect.&lt;/strong>&lt;/p></description></item></channel></rss>